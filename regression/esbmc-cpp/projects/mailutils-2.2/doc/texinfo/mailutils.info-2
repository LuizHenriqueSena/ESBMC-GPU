This is mailutils.info, produced by makeinfo version 4.13 from
mailutils.texi.

INFO-DIR-SECTION Email
START-INFO-DIR-ENTRY
* Mailutils: (mailutils).       GNU Mail Utilities.
END-INFO-DIR-ENTRY
INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* comsatd: (mailutils)comsatd.          Comsat Daemon.
* frm: (mailutils)frm.                  List Headers from a Mailbox.
* guimb: (mailutils)guimb.              Mailbox Processing Language.
* imap4d: (mailutils)imap4d.            IMAP4 Daemon.
* mail: (mailutils)mail.                Send and Receive Mail.
* maidag: (mailutils)maidag.            A General-Purpose Mail Delivery Agent.
* messages: (mailutils)messages.        Count Messages in a Mailbox.
* pop3d: (mailutils)pop3d.              POP3 Daemon.
* readmsg: (mailutils)readmsg.          Extract Messages from a Folder.
* sieve: (mailutils)sieve.              Mail Filtering Utility.
* mimeview: (mailutils)mimeview.        View MIME Messages.
* mailutils-config: (mailutils)mailutils-config. List Information about Mailutils.
END-INFO-DIR-ENTRY

   Published by the Free Software Foundation, 51 Franklin Street, Fifth
Floor Boston, MA 02110-1301, USA

   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2008, 2009, 2010
Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being "A GNU Manual",
and with the Back-Cover Texts as in (a) below. A copy of the license is
included in the section entitled "GNU Free Documentation License".

   (a) The FSF's Back-Cover Text is: "You have freedom to copy and
modify this GNU Manual, like GNU software. Copies published by the Free
Software Foundation raise funds for GNU development."


File: mailutils.info,  Node: Address,  Next: Locker,  Prev: Authenticator,  Up: libmailutils

3.1.12 Address
--------------

     `/* Prefix _address__ is reserved. */'
     `#include <mailutils/address.h>'

   The Internet address format is defined in RFC 822. RFC 822 has been
updated, and is now superceeded by RFC 2822, which makes some
corrections and clarifications. References to RFC 822 here apply
equally to RFC 2822.

   The RFC 822 format is more flexible than many people realize, here
is a quick summary of the syntax this parser implements, see RFC 822
for the details. `[]' pairs mean "optional", `/' means "one or the
other", and double-quoted characters are literals.

     addr-spec    = LOCAL-PART "@" DOMAIN
     mailbox      = ADDR-SPEC ["(" DISPLAY-NAME ")"] /
                    [DISPLAY-NAME] "<" [ROUTE] ADDR-SPEC ">"
     mailbox-list = MAILBOX ["," MAILBOX-LIST]
     group        = DISPLAY-NAME ":" [MAILBOX-LIST] ";"
     address      = MAILBOX / GROUP / UNIX-MBOX
     address-list = ADDRESS ["," ADDRESS-LIST]

   Unix-mbox is a non-standard extension meant to deal with the common
practice of using user names as addresses in mail utilities. It allows
addresses such as "root" to be parsed correctly. These are *not* valid
internet email addresses, they must be qualified before use.

   Several address functions have a set of common arguments with
consistent semantics, these are described here to avoid repetition.

   Since an address-list may contain multiple addresses, they are
accessed by a *one-based* index number, NO. The index is one-based
because pop, imap, and other message stores commonly use one-based
counts to access messages and attributes of messages.

   If LEN is greater than `0' it is the length of the buffer BUF, and
as much of the component as possible will be copied into the buffer.
The buffer will be `NULL' terminated.

   The size of a particular component may be queried by providing `0'
for the LEN of the buffer, in which case the buffer is optional.  In
this case, if N is provided *N is assigned the length of the component
string.

 -- Data Type: mu_address_t
     The `mu_address_t' object is used to hold information about a
     parsed RFC822 address list, and is an opaque data structure to the
     user. Functions are provided to retrieve information about an
     address in the address list.

 -- Function: int mu_address_create (mu_address_t *ADDR, const char
          *STRING)
     This function allocates and initializes ADDR by parsing the RFC822
     address-list STRING.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOMEM'
          Not enough memory to allocate resources.

    `ENOENT'
          Invalid RFC822 syntax, parsing failed.

 -- Function: int mu_address_createv (mu_address_t *ADDR, const char
          *SV, size_t LEN)
     This function allocates and initializes ADDR by parsing the array
     of pointers to RFC822 address-lists in SV. If LEN is `-1', then SV
     must be `NULL' terminated in the fashion of ARGV, otherwise LEN is
     the length of the array.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOMEM'
          Not enough memory to allocate resources.

    `ENOENT'
          Invalid RFC822 syntax, parsing failed.

 -- Function: void mu_address_destroy (mu_address_t *ADDR)
     The ADDR is destroyed.

 -- Function: int mu_address_get_nth (mu_address_t ADDR, size_t NO,
          mu_address_t *RET)

 -- Function: int mu_address_get_email (mu_address_t ADDR, size_t NO,
          char* BUF, size_t LEN, size_t *N)
     Accesses the NOth email address component of the address list. This
     address is the plain email address, correctly quoted, suitable for
     using in an smtp dialog, for example, or as the address part of a
     contact book entry.

     Note that the entry may be valid, but be a group name. In this
     case success is returned, but the length of the address is `0'.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOENT'
          The index NO is outside of the range of available addresses.

 -- Function: int mu_address_get_local_part (mu_address_t ADDR, size_t
          NO, char *BUF, size_t LEN, size_t *N)
     Accesses the local-part of an email addr-spec extracted while
     parsing the NOth email address.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOENT'
          The index NO is outside of the range of available addresses.

 -- Function: int mu_address_get_domain (mu_address_t ADDR, size_t NO,
          char *BUF, size_t LEN, size_t *N)
     Accesses the domain of an email addr-spec extracted while parsing
     the NOth email address. This will be `0' length for a unix-mbox.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOENT'
          The index NO is outside of the range of available addresses.

 -- Function: int mu_address_get_personal (mu_address_t ADDR, size_t
          NO, char *BUF, size_t LEN, size_t *N)
     Accesses the display-name describing the NOth email address. This
     display-name is optional, so may not be present. If it is not
     present, but there is an RFC822 comment after the address, that
     comment will be returned as the personal phrase, as this is a
     common usage of the comment even though it is not defined in the
     internet mail standard.

     A group is a kind of a special case. It has a display-name,
     followed by an optional mailbox-list. The display-name will be
     allocated an address all it's own, but all the other elements
     (local-part, domain, etc.) will be zero-length. So "a group: ;" is
     valid, will have a count of 1, but `mu_address_get_email()', and
     all the rest, will return zero-length output.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOENT'
          The index NO is outside of the range of available addresses.

 -- Function: int mu_address_get_comments (mu_address_t ADDR, size_t
          NO, char *BUF, size_t LEN, size_t *N)
     Accesses the comments extracted while parsing the NOth email
     address.  These comments have no defined meaning, and are not
     currently collected.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOENT'
          The index NO is outside of the range of available addresses.

 -- Function: int mu_address_get_route (mu_address_t ADDR, size_t NO,
          char *BUF, size_t LEN, size_t *N)
     Accesses the route of an email addr-spec extracted while parsing
     the NOth email address. This is a rarely used RFC822 address
     syntax, but is legal in SMTP as well. The entire route is returned
     as a string, those wishing to parse it should look at
     `mailutils/parse822.h'.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOENT'
          The index NO is outside of the range of available addresses.

 -- Function: int mu_address_aget_email (mu_address_t ADDR, size_t NO,
          char **BUFP)
     As above, but mallocs the email address, if present, and write a
     pointer to it into BUFP. BUFP will be `NULL' if there is no email
     address to return.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOENT'
          The index NO is outside of the range of available addresses.

 -- Function: int mu_address_aget_local_part (mu_address_t ADDR, size_t
          NO, char **BUF)

 -- Function: int mu_address_aget_domain (mu_address_t ADDR, size_t NO,
          char **BUF)

 -- Function: int mu_address_aget_personal (mu_address_t ADDR, size_t
          NO, char **BUF)

 -- Function: int mu_address_is_group (mu_address_t ADDR, size_t NO,
          int *YES)
     Sets *YES to `1' if this address is just the name of a group, `0'
     otherwise. This is faster than checking if the address has a
     non-zero length personal, and a zero-length local_part and domain.

     YES can be `NULL', though that doesn't serve much purpose other
     than determining that NO refers to an address.

     Currently, there is no way to determine the end of the group.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOENT'
          The index NO is outside of the range of available addresses.

 -- Function: int mu_address_to_string (mu_address_t *ADDR, char *BUF,
          size_t LEN, size_t *N)
     Returns the entire address list as a single RFC822 formatted
     address list.

     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          Invalid usage, usually a required argument was `NULL'.

    `ENOMEM'
          Not enough memory to allocate resources.

 -- Function: int mu_address_get_count (mu_address_t ADDR, size_t
          *COUNT)
     Returns a count of the addresses in the address list.

     If ADDR is `NULL', the count is `0'. If COUNT is not `NULL', the
     count will be written to *COUNT.

     The return value is `0'.

 -- Function: int mu_address_get_group_count (mu_address_t ADDR, size_t
          *)

 -- Function: int mu_address_get_email_count (mu_address_t ADDR, size_t
          *)

 -- Function: int mu_address_get_unix_mailbox_count (mu_address_t ADDR,
          size_t *)

 -- Function: int mu_address_contains_email (mu_address_t ADDR, const
          char *EMAIL)

 -- Function: int mu_address_union (mu_address_t *A, mu_address_t B)

 -- Function: size_t mu_address_format_string (mu_address_t ADDR, char
          *BUF, size_t BUFLEN)

Example
-------


     #ifdef HAVE_CONFIG_H
     # include <config.h>
     #endif
     #include <stdio.h>
     #include <string.h>
     #include <errno.h>

     #include <mailutils/address.h>
     #include <mailutils/errno.h>
     #include <mailutils/kwd.h>
     #include <mailutils/mutil.h>

     #define EPARSE MU_ERR_NOENT

     struct mu_address hint;
     int hflags;

     static int
     parse (const char *str)
     {
       size_t no = 0;
       size_t pcount = 0;
       int status;
       const char *buf;
       mu_address_t address = NULL;

       status = mu_address_create_hint (&address, str, &hint, hflags);
       mu_address_get_count (address, &pcount);

       if (status)
         {
           printf ("%s=> error %s\n\n", str, mu_errname (status));
           return 0;
         }
       else
         {
           printf ("%s=> pcount %lu\n", str, (unsigned long) pcount);
         }

       for (no = 1; no <= pcount; no++)
         {
           int isgroup;

           mu_address_is_group (address, no, &isgroup);
           printf ("%lu ", (unsigned long) no);

           if (isgroup)
             {
               mu_address_sget_personal (address, no, &buf);
               printf ("group <%s>\n", buf);
             }
           else
             {
               mu_address_sget_email (address, no, &buf);
               printf ("email <%s>\n", buf);
             }

           if (mu_address_sget_personal (address, no, &buf) == 0 && buf && !isgroup)
             printf ("   personal <%s>\n", buf);

           if (mu_address_sget_comments (address, no, &buf) == 0 && buf)
             printf ("   comments <%s>\n", buf);

           if (mu_address_sget_local_part (address, no, &buf) == 0 && buf)
             {
               printf ("   local-part <%s>", buf);

               if (mu_address_sget_domain (address, no, &buf) == 0 && buf)
                 printf (" domain <%s>", buf);

               printf ("\n");
             }

           if (mu_address_sget_route (address, no, &buf) == 0 && buf)
             printf ("   route <%s>\n", buf);
         }
       mu_address_destroy (&address);

       printf ("\n");
       return 0;
     }

     struct mu_kwd hintnames[] = {
       { "comments", MU_ADDR_HINT_COMMENTS },
       { "personal", MU_ADDR_HINT_PERSONAL },
       { "email", MU_ADDR_HINT_EMAIL },
       { "local", MU_ADDR_HINT_LOCAL },
       { "domain", MU_ADDR_HINT_DOMAIN },
       { "route", MU_ADDR_HINT_ROUTE },
       { NULL }
     };

     static char **
     addr_fieldptr_by_mask (mu_address_t addr, int mask)
     {
       switch (mask)
         {
         case MU_ADDR_HINT_ADDR:
           return &addr->addr;

         case MU_ADDR_HINT_COMMENTS:
           return &addr->comments;

         case MU_ADDR_HINT_PERSONAL:
           return &addr->personal;

         case MU_ADDR_HINT_EMAIL:
           return &addr->email;

         case MU_ADDR_HINT_LOCAL:
           return &addr->local_part;

         case MU_ADDR_HINT_DOMAIN:
           return &addr->domain;

         case MU_ADDR_HINT_ROUTE:
           return &addr->route;
         }
       return NULL;
     }

     void
     sethint (char *str)
     {
       int mask;
       char *p = strchr (str, '=');

       if (!p)
         {
           printf ("%s=> bad assignment\n\n", str);
           return;
         }
       *p++ = 0;
       if (mu_kwd_xlat_name (hintnames, str, &mask) == 0)
         {
           char **fptr = addr_fieldptr_by_mask (&hint, mask);

           if (*p == 0)
     	hflags &= ~mask;
           else
     	{
     	  *fptr = strdup (p);
     	  hflags |= mask;
     	}
         }
       else
         printf ("%s=> unknown hint name\n\n", str);
     }

     static int
     parseinput (void)
     {
       char buf[BUFSIZ];

       while (fgets (buf, sizeof (buf), stdin) != 0)
         {
           buf[strlen (buf) - 1] = 0;
           if (buf[0] == '\\')
     	sethint (buf + 1);
           else
     	parse (buf);
         }

       return 0;
     }

     int
     main (int argc, char *argv[])
     {
       int i;

       hint.domain = "localhost";
       hflags = MU_ADDR_HINT_DOMAIN;

       if (argc == 1)
         return parseinput ();

       for (i = 1; i < argc; i++)
         {
           if (strcmp (argv[i], "-") == 0)
     	parseinput ();
           else if (strncmp (argv[i], "-v", 2) == 0)
     	sethint (argv[i] + 2);
           else
     	parse (argv[i]);
         }

       return 0;
     }


File: mailutils.info,  Node: Locker,  Next: URL,  Prev: Address,  Up: libmailutils

3.1.13 Locker
-------------

     `/* Prefix _mu_locker__ is reserved. */'
     `#include <mailutils/locker.h>'

 -- Function: int mu_locker_set_default_flags (int FLAGS, enum
          mu_locker_set_mode MODE)

 -- Function: void mu_locker_set_default_retry_timeout (time_t TO)

 -- Function: void mu_locker_set_default_retry_count (size_t N)

 -- Function: void mu_locker_set_default_expire_timeout (time_t T)

 -- Function: void mu_locker_set_default_external_program (char *PATH)

   A flags of 0 means that the default will be used.

 -- Function: int mu_locker_create (mu_locker_t *, const char
          *FILENAME, int FLAGS)

 -- Function: void mu_locker_destroy (mu_locker_t *)

   Time is measured in seconds.

 -- Function: int mu_locker_set_flags (mu_locker_t, int)

 -- Function: int mu_locker_set_expire_time (mu_locker_t, int)

 -- Function: int mu_locker_set_retries (mu_locker_t, int)

 -- Function: int mu_locker_set_retry_sleep (mu_locker_t, int)

 -- Function: int mu_locker_set_external (mu_locker_t, const char
          *PROGRAM)

 -- Function: int mu_locker_get_flags (mu_locker_t, int *)

 -- Function: int mu_locker_get_expire_time (mu_locker_t, int*)

 -- Function: int mu_locker_get_retries (mu_locker_t, int *)

 -- Function: int mu_locker_get_retry_sleep (mu_locker_t, int *)

 -- Function: int mu_locker_get_external (mu_locker_t, char **)

 -- Function: int mu_locker_lock (mu_locker_t)

 -- Function: int mu_locker_touchlock (mu_locker_t)

 -- Function: int mu_locker_unlock (mu_locker_t)

 -- Function: int mu_locker_remove_lock (mu_locker_t)


File: mailutils.info,  Node: URL,  Next: Parse822,  Prev: Locker,  Up: libmailutils

3.1.14 URL
----------

A mailbox or a mailer can be described in a URL, the string will
contain the necessary information to initialize `mailbox_t', or
`mailer_t' properly.

POP3
....

The POP URL scheme contains a POP server, optional port number and the
authentication mechanism. The general form is

     <pop://[USER[;AUTH=AUTH]@]HOST[:PORT]>
      or
     <pop://[USER[:PASSWD]@]HOST[:PORT]>

   If _:port_ is omitted the default value is 110. Different forms of
authentication can be specified with _;AUTH=TYPE_.  The special string
_;AUTH=*_ indicates that the client will use a default scheme base on
the capability of the server.

     <pop://obelix@gaulois.org>
     <pop://asterix;AUTH=*@france.com>
     <pop://falbala;AUTH=+APOP@france.com>
     <pop://obelix;AUTH=+APOP@village.gaulois.org:2000>
     <pop://obelix:menhir@village.gaulois.org:2000>

   For more complete information see `RFC 2368'.

POP3S (POP3 Over SSL)
.....................

The POP3S URL scheme contains a POP server over SSL, optional port
number and the authentication mechanism. The general form is

     <pops://[USER[;AUTH=AUTH]@]HOST[:PORT]>
      or
     <pops://[USER[:PASSWD]@]HOST[:PORT]>

   If _:port_ is omitted the default value is 995.

IMAP
....

The IMAP URL scheme contains an IMAP server, optional port number and
the authentication mechanism. The general form is

     <imap://[USER[;AUTH=TYPE]]@HOST[:PORT][/MAILBOX]>
      or
     <imap://[USER[:PASSWD]]@HOST[:PORT][/MAILBOX]>

   If _:port_ is omitted the default value is 143. Different forms of
authentication can be specified with _;AUTH=TYPE_.  The special string
_;AUTH=*_ indicates that the client will use a default scheme base on
the capability of the server.

     <imap://obelix@imap.gaulois.org>
     <imap://asterix;AUTH=*@imap.france.com>
     <imap://asterix:potion@imap.france.com>

   For more complete information see `RFC 2192'.

IMAPS (IMAP Over SSL)
.....................

The IMAPS URL scheme contains an IMAP server over SSL, optional port
number and the authentication mechanism. The general form is

     <imaps://[USER[;AUTH=TYPE]]@HOST[:PORT][/MAILBOX]>
      or
     <imaps://[USER[:PASSWD]]@HOST[:PORT][/MAILBOX]>

   If _:port_ is omitted the default value is 993.

File
....

Local folder should be handle by this URL. It is preferable to let the
mailbox recognize the type of mailbox and take the appropriate action.

     <file://PATH>
     <file://var/mail/user>
     <file://home/obelix/Mail>

   For MMDF, MH local mailboxes URLs are provided,  but it is
preferable to use <file://PATH> and let the library figure out which
one.

     <mmdf://PATH>
     <mh://PATH>

Mailto
......

After setting a mailer, <mailto:> is used to tell the mailer where and
to whom the message is for.

     <mailto://HOSTNAME>

   Mailto can be used to generate short messages, for example to
subscribe to mailing lists.

     <mailto://bug-mailutils@gnu.org?body=subscribe>
     <mailto://bug-mailutils@gnu.org?Subject=hello&body=subscribe>

   For more complete information see `RFC 2368'.

URL Functions
.............

Helper functions are provided to retrieve and set the _URL_ fields.

 -- Function: int mu_url_create (mu_url_t *URL, const char *NAME)
     Create the url data structure, but do not parse it.

 -- Function: void mu_url_destroy (mu_url_t *URL)
     Destroy the url and free its resources.

 -- Function: int mu_url_parse (mu_url_t)
     Parses the url, after calling this the get functions can be called.

     The syntax, condensed from `RFC 1738', and extended with the ;auth=
     of `RFC 2384' (for POP) and `RFC 2192' (for IMAP) is:

          url =
              scheme ":" [ "//"

              [ USER [ ( ":" PASSWORD ) | ( ";auth=" AUTH ) ] "@" ]

              HOST [ ":" PORT ]

              [ ( "/" URLPATH ) | ( "?" QUERY ) ] ]

     This is a generalized URL syntax, and may not be exactly
     appropriate for any particular scheme.

 -- Function: int mu_url_get_scheme (const mu_url_t, char *, size_t,
          size_t *)

 -- Function: int mu_url_get_user (const mu_url_t, char *, size_t,
          size_t *)

 -- Function: int mu_url_get_passwd (const mu_url_t, char *, size_t,
          size_t *)

 -- Function: int mu_url_get_auth (const mu_url_t, char *, size_t,
          size_t *)

 -- Function: int mu_url_get_host (const mu_url_t, char *, size_t,
          size_t *)

 -- Function: int mu_url_get_port (const mu_url_t, long *)

 -- Function: int mu_url_get_path (const mu_url_t, char *, size_t,
          size_t *)

 -- Function: int mu_url_get_query (const mu_url_t, char *, size_t,
          size_t *)

 -- Function: const char* mu_url_to_string (const mu_url_t)

 -- Function: int mu_url_is_scheme (mu_url_t, const char *SCHEME)

 -- Function: int mu_url_is_same_scheme (mu_url_t, mu_url_t)

 -- Function: int mu_url_is_same_user (mu_url_t, mu_url_t)

 -- Function: int mu_url_is_same_path (mu_url_t, mu_url_t)

 -- Function: int mu_url_is_same_host (mu_url_t, mu_url_t)

 -- Function: int mu_url_is_same_port (mu_url_t, mu_url_t)

 -- Function: char * mu_url_decode (const char *STRING)
     Decodes an `RFC 1738' encoded string, returning the decoded string
     in allocated memory. If the string is not encoded, this
     degenerates to a `strdup()'.

 -- Function: int mu_url_is_ticket (mu_url_t TICKET, mu_url_t URL)

Example
.......


     #ifdef HAVE_CONFIG_H
     # include <config.h>
     #endif
     #include <stdlib.h>
     #include <stdio.h>
     #include <string.h>
     #include <mailutils/error.h>
     #include <mailutils/errno.h>
     #include <mailutils/url.h>
     #include <mailutils/secret.h>

     #define CAT2(a,b) a ## b

     #define GET_AND_PRINT(field,u,buf,status) 		                \
           status = CAT2(mu_url_sget_,field) (u, &buf);	                \
           if (status == MU_ERR_NOENT)			                \
     	buf = "";					                \
           else if (status)					                \
     	{						                \
     	  mu_error ("cannot get %s: %s", #field, mu_strerror (status));	\
     	  exit (1);					                \
             }                                                               \
           printf ("\t" #field " <%s>\n", buf)

     static void
     print_fvpairs (mu_url_t url)
     {
       size_t fvc, i;
       char **fvp;
       int rc = mu_url_sget_fvpairs (url, &fvc, &fvp);
       if (rc)
         {
           mu_error ("cannot get F/V pairs: %s", mu_strerror (rc));
           exit (1);
         }
       if (fvc == 0)
         return;
       for (i = 0; i < fvc; i++)
         printf ("\tparam[%lu] <%s>\n", (unsigned long) i, fvp[i]);
     }

     static void
     print_query (mu_url_t url)
     {
       size_t qargc, i;
       char **qargv;
       int rc = mu_url_sget_query (url, &qargc, &qargv);
       if (rc)
         {
           mu_error ("cannot get query: %s", mu_strerror (rc));
           exit (1);
         }
       if (qargc == 0)
         return;
       for (i = 0; i < qargc; i++)
         printf ("\tquery[%lu] <%s>\n", (unsigned long) i, qargv[i]);
     }

     int
     main ()
     {
       char str[1024];
       long port = 0;
       mu_url_t u = NULL;

       while (fgets (str, sizeof (str), stdin) != NULL)
         {
           int rc;
           const char *buf;
           mu_secret_t secret;

           str[strlen (str) - 1] = '\0';     /* chop newline */
           if (strspn (str, " \t") == strlen (str))
             continue;               /* skip empty lines */
           if ((rc = mu_url_create (&u, str)) != 0)
             {
               fprintf (stderr, "mu_url_create %s ERROR: [%d] %s",
                        str, rc, mu_strerror (rc));
               exit (1);
             }
           if ((rc = mu_url_parse (u)) != 0)
             {
               printf ("%s => FAILED: [%d] %s\n",
                       str, rc, mu_strerror (rc));
               continue;
             }
           printf ("%s => SUCCESS\n", str);

           GET_AND_PRINT (scheme, u, buf, rc);
           GET_AND_PRINT (user, u, buf, rc);

           rc = mu_url_get_secret (u, &secret);
           if (rc == MU_ERR_NOENT)
     	printf ("\tpasswd <>\n");
           else if (rc)
     	{
     	  mu_error ("cannot get %s: %s", "passwd", mu_strerror (rc));
     	  exit (1);
             }
           else
     	{
     	  printf ("\tpasswd <%s>\n", mu_secret_password (secret));
     	  mu_secret_password_unref (secret);
     	}

           GET_AND_PRINT (auth, u, buf, rc);
           GET_AND_PRINT (host, u, buf, rc);

           rc = mu_url_get_port (u, &port);
           if (rc)
     	{
     	  mu_error ("cannot get %s: %s", "port", mu_strerror (rc));
     	  exit (1);
             }
           printf ("\tport %ld\n", port);

           GET_AND_PRINT (path, u, buf, rc);
           print_fvpairs (u);
           print_query (u);

           mu_url_destroy (&u);

         }
       return 0;
     }


File: mailutils.info,  Node: Parse822,  Next: Mailcap,  Prev: URL,  Up: libmailutils

3.1.15 Parse822
---------------

     `/* Prefix _mu_parse822__ is reserved. */'
     `#include <mailutils/parse822.h>'

 -- Function: int mu_parse822_is_char (char C)

 -- Function: int mu_parse822_is_digit (char C)

 -- Function: int mu_parse822_is_ctl (char C)

 -- Function: int mu_parse822_is_space (char C)

 -- Function: int mu_parse822_is_htab (char C)

 -- Function: int mu_parse822_is_lwsp_char (char C)

 -- Function: int mu_parse822_is_special (char C)

 -- Function: int mu_parse822_is_atom_char (char C)

 -- Function: int mu_parse822_is_q_text (char C)

 -- Function: int mu_parse822_is_d_text (char C)

 -- Function: int mu_parse822_is_smtp_q (char C)

 -- Function: int mu_parse822_skip_crlf (const char **P, const char *E)

 -- Function: int mu_parse822_skip_lwsp_char (const char **P, const
          char *E)

 -- Function: int mu_parse822_skip_lwsp (const char **P, const char *E)

 -- Function: int mu_parse822_skip_comments (const char **P, const char
          *E)

 -- Function: int mu_parse822_skip_nl (const char **P, const char *E)

 -- Function: int mu_parse822_digits (const char **P, const char *E,
          int MIN, int MAX, int *DIGITS)

 -- Function: int mu_parse822_special (const char **P, const char *E,
          char C)

 -- Function: int mu_parse822_comment (const char **P, const char *E,
          char **COMMENT)

 -- Function: int mu_parse822_atom (const char **P, const char *E, char
          **ATOM)

 -- Function: int mu_parse822_quoted_pair (const char **P, const char
          *E, char **QPAIR)

 -- Function: int mu_parse822_quoted_string (const char **P, const char
          *E, char **QSTR)

 -- Function: int mu_parse822_word (const char **P, const char *E, char
          **WORD)

 -- Function: int mu_parse822_phrase (const char **P, const char *E,
          char **PHRASE)

 -- Function: int mu_parse822_d_text (const char **P, const char *E,
          char **DTEXT)

 -- Function: int mu_parse822_address_list (mu_address_t *A, const char
          *S)

 -- Function: int mu_parse822_mail_box (const char **P, const char *E,
          mu_address_t *A)

 -- Function: int mu_parse822_group (const char **P, const char *E,
          mu_address_t *A)

 -- Function: int mu_parse822_address (const char **P, const char *E,
          mu_address_t *A)

 -- Function: int mu_parse822_route_addr (const char **P, const char
          *E, mu_address_t *A)

 -- Function: int mu_parse822_route (const char **P, const char *E,
          char **ROUTE)

 -- Function: int mu_parse822_addr_spec (const char **P, const char *E,
          mu_address_t *A)

 -- Function: int mu_parse822_unix_mbox (const char **P, const char *E,
          mu_address_t *A)

 -- Function: int mu_parse822_local_part (const char **P, const char
          *E, char **LOCAL_PART)

 -- Function: int mu_parse822_domain (const char **P, const char *E,
          char **DOMAIN)

 -- Function: int mu_parse822_sub_domain (const char **P, const char
          *E, char **SUB_DOMAIN)

 -- Function: int mu_parse822_domain_ref (const char **P, const char
          *E, char **DOMAIN_REF)

 -- Function: int mu_parse822_domain_literal (const char **P, const
          char *E, char **DOMAIN_LITERAL)

 -- Function: int mu_parse822_quote_string (char **QUOTED, const char
          *RAW)

 -- Function: int mu_parse822_quote_local_part (char **QUOTED, const
          char *RAW)

 -- Function: int mu_parse822_field_body (const char **P, const char
          *E, char **FIELDBODY)

 -- Function: int mu_parse822_field_name (const char **P, const char
          *E, char **FIELDNAME)

 -- Function: int mu_parse822_day (const char **P, const char *E, int
          *DAY)

 -- Function: int mu_parse822_date (const char **P, const char *E, int
          *DAY, int *MON, int *YEAR)

 -- Function: int mu_parse822_time (const char **P, const char *E, int
          *H, int *M, int *S, int *TZ, const char **TZ_NAME)

 -- Function: int mu_parse822_date_time (const char **P, const char *E,
          struct tm *TM, mu_timezone *TZ)


File: mailutils.info,  Node: Mailcap,  Prev: Parse822,  Up: libmailutils

3.1.16 Mailcap
--------------

     `/* Prefix _mu_mailcap__ is reserved. */'
     `#include <mailutils/mailcap.h>'

   The standard `RFC 1524' (A User Agent Configuration Mechanism)
suggests a file format to be used to inform a mail user agent about
facilities for handling mail in various format. The configuration file
is known also as mailcap and it is tipically found in UNIX platforms, a
example of `/etc/mailcap':

     application/pgp; gpg < %s | metamail; needsterminal; \
            test=test %{encapsulation}=entity ; copiousoutput

   A mailcap file consists of a set of mailcap entries per line, lines
beginning with `#' are considered comments and ignored. Long mailcap
entry may be continued on multiple lines if each line ends with a
backslash character `\', the multiline will be considered a single
mailcap entry. The overall format in BNF:

     Mailcap-File = *MAILCAP-LINE
     Mailcap-Line = COMMENT | MAILCAP-ENTRY
     Comment = NEWLINE | "#" * CHAR NEWLINE
     Newline = <newline as defined by OS convention>

   Each mailcap entry consists of a number of fields, separated by
semi-colons. The first two fields are required and must occur in the
specified order, the remaining fields are optional.

     Mailcap-Entry = TYPEFIELD ";" VIEW-COMMAND ";" *[ ";" FIELD ]

 -- Data Type: mu_mailcap_t, mu_mailcap_entry_t
     The `mu_mailcap_t' and `mu_mailcap_entry_t' objects are used to
     hold information and it is an opaque data structure to the user.
     Functions are provided to retrieve information from the data
     structure.

                             mu_mailcap_t                  mu_mailcap_entry_t
     -/etc/mailcap-  +--->/------------------------\  +-->/------------------\
     (  alain   )         |  mu_mailcap_entry[0]*--|--+   |  typefield       |
                          |  mu_mailcap_entry[1]   |      |  view-command    |
                          |  .....                 |      |  field[0]        |
                          |  mu_mailcap_entry[n]   |      |  .....           |
                          \------------------------/      |  field[n]        |
                                                          \------------------/

An Example of Parsing a Mailcap File:
-------------------------------------


     #ifdef HAVE_CONFIG_H
     # include <config.h>
     #endif
     #include <stdlib.h>
     #include <stdio.h>
     #include <mailutils/mailcap.h>
     #include <mailutils/stream.h>
     #include <mailutils/error.h>

     int
     main (int argc, char **argv)
     {
       mu_stream_t stream = NULL;
       int status = 0;
       char *file = argc == 1 ? "/etc/mailcap" : argv[1];
       mu_mailcap_t mailcap = NULL;

       status = mu_file_stream_create (&stream, file, MU_STREAM_READ);
       if (status)
         {
           mu_error ("cannot create file stream %s: %s",
     		file, mu_strerror (status));
           exit (1);
         }

       status = mu_stream_open (stream);
       if (status)
         {
           mu_error ("cannot open file stream %s: %s",
     		file, mu_strerror (status));
           exit (1);
         }

       status = mu_mailcap_create (&mailcap, stream);
       if (status == 0)
         {
           int i;
           size_t count = 0;
           char buffer[256];

           mu_mailcap_entries_count (mailcap, &count);
           for (i = 1; i <= count; i++)
     	{
     	  size_t j;
     	  mu_mailcap_entry_t entry = NULL;
     	  size_t fields_count = 0;

     	  printf ("entry[%d]\n", i);

     	  mu_mailcap_get_entry (mailcap, i, &entry);

     	  /* typefield.  */
     	  mu_mailcap_entry_get_typefield (entry, buffer,
     					  sizeof (buffer), NULL);
     	  printf ("\ttypefield: %s\n", buffer);

     	  /* view-command.  */
     	  mu_mailcap_entry_get_viewcommand (entry, buffer,
     					    sizeof (buffer), NULL);
     	  printf ("\tview-command: %s\n", buffer);

     	  /* fields.  */
     	  mu_mailcap_entry_fields_count (entry, &fields_count);
     	  for (j = 1; j <= fields_count; j++)
     	    {
     	      int status = mu_mailcap_entry_get_field (entry, j, buffer,
     						       sizeof (buffer), NULL);
     	      if (status)
     		{
     		  mu_error ("cannot retrieve field %lu: %s",
     			    (unsigned long) j,
     			    mu_strerror (status));
     		  break;
     		}
     	      printf ("\tfields[%lu]: %s\n", (unsigned long) j, buffer);
     	    }
     	  printf ("\n");
     	}
           mu_mailcap_destroy (&mailcap);
         }

       return 0;
     }

 -- Function: int mu_mailcap_create (mu_mailcap_t *MAILCAP, mu_stream_t
          STREAM)
     The function allocates, parses the buffer from the STREAM and
     initializes MAILCAP.  The return value is `0' on success and a
     code number on error conditions:
    `MU_ERROR_INVALID_PARAMETER'
          MAILCAP is `NULL' or STREAM is invalid.

 -- Function: void mu_mailcap_destroy (mu_mailcap_t *MAILCAP)
     Release any resources from the mailcap object.

 -- Function: int mu_mailcap_entries_count (mu_mailcap_t MAILCAP,
          size_t *COUNT)
     The function returns the number of entries found in the mailcap.
     The return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          MAILCAP or COUNT is `NULL'.

 -- Function: int mu_mailcap_get_entry (mu_mailcap_t MAILCAP, size_t
          NO, mu_mailcap_entry_t *ENTRY)
     Returns in ENTRY the mailcap entry of NO.

 -- Function: int mu_mailcap_entry_fields_count (mu_mailcap_entry_t
          ENTRY, size_t *COUNT)
     The function returns the number of fields found in the entry.  The
     return value is `0' on success and a code number on error
     conditions:
    `EINVAL'
          ENTRY or COUNT is `NULL'.

 -- Function: int mu_mailcap_entry_get_typefield (mu_mailcap_entry_t
          ENTRY, char *BUFFER, size_t BUFLEN, size_t *N)

 -- Function: int mu_mailcap_entry_get_viewcommand (mu_mailcap_entry_t
          ENTRY, char *BUFFER, size_t BUFLEN, size_t *N)

 -- Function: int mu_mailcap_entry_get_field (mu_mailcap_entry_t ENTRY,
          size_t NO, char *BUFFER, size_t BUFLEN, size_t *N)

 -- Function: int mu_mailcap_entry_get_value (mu_mailcap_entry_t ENTRY,
          const char *KEY, char *BUFFER, size_t BUFLEN, size_t *N)

 -- Function: int mu_mailcap_entry_get_compose (mu_mailcap_entry_t
          ENTRY, char *BUFFER, size_t BUFLEN, size_t *N)
     Helper function saving in buffer, the argument of "compose" field.

 -- Function: int mu_mailcap_entry_get_composetyped (mu_mailcap_entry_t
          ENTRY, char *BUFFER, size_t BUFLEN, size_t *N)
     Helper function saving in buffer, the argument of "composetyped"
     field.

 -- Function: int mu_mailcap_entry_get_edit (mu_mailcap_entry_t ENTRY,
          char *BUFFER, size_t BUFLEN, size_t *N)
     Helper function saving in buffer, the argument of "edit" field.

 -- Function: int mu_mailcap_entry_get_textualnewlines
          (mu_mailcap_entry_t ENTRY, char *BUFFER, size_t BUFLEN,
          size_t *N)
     Helper function saving in buffer, the argument of
     "textualnewlines" field.

 -- Function: int mu_mailcap_entry_get_test (mu_mailcap_entry_t ENTRY,
          char *BUFFER, size_t BUFLEN, size_t *N)
     Helper function saving in buffer, the argument of "test" field.

 -- Function: int mu_mailcap_entry_get_x11bitmap (mu_mailcap_entry_t
          ENTRY, char *BUFFER, size_t BUFLEN, size_t *N)
     Helper function saving in buffer, the argument of "x11-bitmap"
     field.

 -- Function: int mu_mailcap_entry_get_description (mu_mailcap_entry_t
          ENTRY, char *BUFFER, size_t BUFLEN, size_t *N)
     Helper function saving in buffer, the argument of "description"
     field.

 -- Function: int mu_mailcap_entry_get_nametemplate (mu_mailcap_entry_t
          ENTRY, char *BUFFER, size_t BUFLEN, size_t *N)
     Helper function saving in buffer, the argument of "nametemplate"
     field.

 -- Function: int mu_mailcap_entry_get_notes (mu_mailcap_entry_t ENTRY,
          char *BUFFER, size_t BUFLEN, size_t *N)
     Helper function saving in buffer, the argument of "notes" field.

 -- Function: int mu_mailcap_entry_needsterminal (mu_mailcap_entry_t
          ENTRY, int *ON)
     Helper function. Returns *ON != 0 if the flag `needsterminal' is
     in the record.

 -- Function: int mu_mailcap_entry_copiousoutput (mu_mailcap_entry_t
          ENTRY, int *ON)
     Helper function. Returns *ON != 0 if the flag COPIOUSOUTPUT is in
     the record.


File: mailutils.info,  Node: libmu_auth,  Next: libmu_scm,  Prev: libmailutils,  Up: Libraries

3.2 Authentication Library
==========================

The functions from `libmailutils' library get user information from the
system user database. The library `libmu_auth' extends this
functionality, allowing `libmailutils' functions to obtain information
about a user from several places, like SQL database, etc. The method
used is described in detail in *note authentication: Auth Statement.
This chapter contains a very succinct description of the underlying
library mechanism.

* Menu:

* Data Types::
* Initializing libmu_auth::
* Module Creation and Destruction::
* Obtaining Authorization Information::
* Existing Modules::
* Using libmu_auth in Your Programs::


File: mailutils.info,  Node: Data Types,  Next: Initializing libmu_auth,  Up: libmu_auth

3.2.1 Data Types
----------------

 -- Data Type: mu_auth_fp
     This is a pointer to authentication or authorization data. It is
     defined as follows:

          typedef int (*mu_auth_fp) (struct mu_auth_data **RETURN_DATA,
                                     void *KEY,
                                     void *FUNC_DATA,
                                     void *CALL_DATA);

     Its arguments are:

    RETURN_DATA
          Upon successful return authorization handler leaves in this
          memory location a pointer to the filled `mu_auth_data'
          structure with the user's information.

          For authentication handlers this argument is always `NULL' and
          should be ignored.

    KEY
          The search key value. Its actual type depends upon type of
          the handler.

          For authorization handlers it is `const char*' if the handler
          is called by `mu_get_auth_by_name()' and `uid_t *' if it is
          called by `mu_get_auth_by_uid()'.

          For authentication handlers it is always `struct
          mu_auth_data*' representing the user's data obtained by a
          previous call to a `mu_get_auth_by_...' function.

    FUNC_DATA
          Any data associated with this handler.

    CALL_DATA
          Any call specific data. This argument is not used at the
          moment.

 -- Data Type: mu_auth_data
     The `mu_auth_data' is used to return the information about the
     user. It is similar to system `struct passwd', except that it is
     more mailutils-specific. Its definition is:

          struct mu_auth_data {
            /* These are from struct passwd */
            char    *name;       /* user name */
            char    *passwd;     /* user password */
            uid_t   uid;         /* user id */
            gid_t   gid;         /* group id */
            char    *gecos;      /* real name */
            char    *dir;        /* home directory */
            char    *shell;      /* shell program */
            /* */
            char    *mailbox;    /* Path to the user's system mailbox */
            int     change_uid;  /* Should the uid be changed? */
          };

 -- Data Type: mu_auth_module
     The `mu_auth_module' structure contains full information about a
     libmu_auth module. It is declared as follows:

          struct mu_auth_module {
            char           *name;              /* Module name */
            struct argp    *argp;              /* Corresponding argp structure */
            mu_auth_fp     authenticate;       /* Authentication function ... */
            void           *authenticate_data; /* ... and its specific data */
            mu_auth_fp     auth_by_name;       /* Get user info by user name */
            void           *auth_by_name_data; /* ... and its specific data */
            mu_auth_fp     auth_by_uid;        /* Get user info by user id */
            void           *auth_by_uid_data;  /* ... and its specific data */
          };


File: mailutils.info,  Node: Initializing libmu_auth,  Next: Module Creation and Destruction,  Prev: Data Types,  Up: libmu_auth

3.2.2 Initializing `libmu_auth'
-------------------------------

 -- Function: void mu_auth_init (void)
     This function registers the command line capability "auth". It
     must be called after registering `libmu_auth' modules and before
     calling `mu_agrp_parse()'. If an error occurs, this function prints
     diagnostic message and aborts the program.

 -- Function: void MU_AUTH_REGISTER_ALL_MODULES (void)
     This macro registers all default modules and calls
     `mu_auth_init()'.


File: mailutils.info,  Node: Module Creation and Destruction,  Next: Obtaining Authorization Information,  Prev: Initializing libmu_auth,  Up: libmu_auth

3.2.3 Module Creation and Destruction
-------------------------------------

 -- Function: int mu_auth_data_alloc (struct mu_auth_data **PTR, const
          char *NAME, const char *PASSWD, uid_t UID, gid_t GID, const
          char *GECOS, const char *DIR, const char *SHELL, const char
          *MAILBOX, int CHANGE_UID)
     Create a `mu_auth_data' structure and initialize it with the given
     values. Returns 0 on success and 1 otherwise.

 -- Function: void mu_auth_data_free (struct mu_auth_data *PTR)
     Free the `mu_auth_data' structure allocated by a call to
     `mu_auth_data_alloc()'.

 -- Function: void mu_auth_register_module (struct mu_auth_module *MOD)
     Register the module defined by the MOD argument.


File: mailutils.info,  Node: Obtaining Authorization Information,  Next: Existing Modules,  Prev: Module Creation and Destruction,  Up: libmu_auth

3.2.4 Obtaining Authorization Information
-----------------------------------------

 -- Function: int mu_auth_runlist (list_t FLIST, struct mu_auth_data
          **RETURN_DATA, void *KEY, void *CALL_DATA);
     The list is expected to contain `mu_auth_fp' pointers. Each of them
     is dereferenced and executed until either the list is exhausted or
     any of the functions returns non-zero, whichever occurs first. The
     RETURN_DATA and KEY arguments are passed as the first two
     parameters to the function (see the definition of `mu_auth_fp',
     notice the footnote), the `call_data' is passed as its last
     parameter.

     The function returns 0 if none of the functions from `list'
     succeeded, i.e. returned non-zero value. Otherwise it returns the
     return code from the succeeded function.

 -- Function: struct mu_auth_data * mu_get_auth_by_name (const char
          *USERNAME)
     Search the information about given user by its username. Similar to
     system's `getpwnam' call).

 -- Function: struct mu_auth_data * mu_get_auth_by_uid (uid_t UID)
     Search the information about given user by its uid. Similar to
     system's `getpwuid' call).

 -- Function: int mu_authenticate (struct mu_auth_data *AUTH_DATA, char
          *PASS)
     Authenticate the user whose data are in AUTH_DATA using password
     PASS. Return 0 if the user is authenticated.


File: mailutils.info,  Node: Existing Modules,  Next: Using libmu_auth in Your Programs,  Prev: Obtaining Authorization Information,  Up: libmu_auth

3.2.5 Existing Modules
----------------------

 -- Function: int mu_auth_nosupport (struct mu_auth_data **RETURN_DATA,
          void *KEY, void *FUNC_DATA, void *CALL_DATA);
     The "not-supported" module. Always returns `ENOSYS'.

 -- Variable: mu_auth_system_module
     This module is always registered even if `libmu_auth' is not
     linked.  It performs usual authentication using system user
     database (`/etc/password' et al.)

 -- Variable: mu_auth_generic_module
     This module is always registered even if `libmu_auth' is not
     linked.  Both its authorization handlers are `mu_auth_nosupport'.
     Its authentication handler computes the MD5 or DES hash over the
     supplied password with the seed taken from `passwd' member of its
     KEY argument. Then it compares the obtained hash with the `passwd'
     member itself and returns 1 if both strings match.

 -- Variable: mu_auth_pam_module
     Implements PAM authentication. Both authorization handlers are
     `mu_auth_nosupport()'.

 -- Variable: mu_auth_sql_module
     Implements authentication and authorization via MySQL database. The
     credentials for accessing the database are taken from global
     variables `sql_host', `sql_port', `sql_user', `sql_passwd' and
     `sql_db'. The SQL queries for retrieving user information from
     global variables `sql_getpwnam_query' and `sql_getpwuid_query'.
     The variable `sql_getpass_query' keeps the query used for
     retrieving user's password. , for information on command line
     options used to set these variables.

 -- Variable: mu_auth_virtual_module
     Implements `mu_get_auth_by_name' method using virtual mail domains.
     Neither `mu_get_auth_by_uid' nor `mu_authenticate' is implemented.
     This module must be used together with `generic' module.


File: mailutils.info,  Node: Using libmu_auth in Your Programs,  Prev: Existing Modules,  Up: libmu_auth

3.2.6 Using `libmu_auth' in Your Programs
-----------------------------------------

To link your program against `libmu_auth', obtain loader arguments by
running `mailutils-config' as follows:

     mailutils-config --link auth
   *Note mailutils-config::, for more information about this utility.

   Here is a sample Makefile fragment:

     MU_LDFLAGS=`mailutils-config --link auth`
     MU_INCLUDES=`mailutils-config --include`

     myprog: myprog.c
             $(CC) -omyprog $(CFLAGS) $(MU_INCLUDES) myprog.c $(MU_LDFLAGS)

   If your program will be using only default modules provided by the
library, then it will suffice to call `MU_AUTH_REGISTER_ALL_MODULES()'
somewhere near the start of your program. As an example, consider the
following code fragment (it is taken from the `imap4d' daemon):

     int
     main (int argc, char **argv)
     {
       struct group *gr;
       int status = EXIT_SUCCESS;

       state = STATE_NONAUTH; /* Starting state in non-auth.  */

       MU_AUTH_REGISTER_ALL_MODULES ();
       mu_argp_parse (&argp, &argc, &argv, 0, imap4d_capa,
                      NULL, &daemon_param);
       ...

   Otherwise, if your program will use it's own modules, first register
them with `mu_auth_register_module' and then call `mu_auth_init()',
e.g.:

     struct mu_auth_module radius_module = {
       ...
     };

     struct mu_auth_module ext_module = {
       ...
     };

     int
     main (int argc, char **argv)
     {
       mu_auth_register_module (&radius_module);
       mu_auth_register_module (&ext_module);
       mu_auth_init ();

       ...

   These two approaches may be combined, allowing you to use both your
modules and the ones provided by Mailutils. Consider the example below:

     int
     main (int argc, char **argv)
     {
       mu_auth_register_module (&radius_module);
       mu_auth_register_module (&ext_module);
       MU_AUTH_REGISTER_ALL_MODULES ();

       ...
     }


File: mailutils.info,  Node: libmu_scm,  Next: libmu_sieve,  Prev: libmu_auth,  Up: Libraries

3.3 Mailutils to Scheme Interface
=================================

The library `libmu_scm' provides an interface between Mailutils and
Guile, allowing to access the Mailutils functionality from a Scheme
program. For more information about Guile, refer to *note Overview:
(guile)Top. For information about Scheme programming language, *Note
Top: (r4rs)Top.

* Menu:

Functions Provided by `libmu_scm'

* Address Functions::
* Mailbox Functions::
* Message Functions::
* MIME Functions::
* Logging Functions::
* Other Functions::

Using `libmu_scm'

* Direct Linking::
* Dynamic Linking::


File: mailutils.info,  Node: Address Functions,  Next: Mailbox Functions,  Up: libmu_scm

3.3.1 Address Functions
-----------------------

 -- Scheme procedure: mu-address-get-personal address num
     Return personal part of the NUMth email address from ADDRESS.


 -- Scheme procedure: mu-address-get-comments address num
     Return comment part of the NUMth email address from ADDRESS.


 -- Scheme procedure: mu-address-get-email address num
     Return email part of the NUMth email address from ADDRESS.


 -- Scheme procedure: mu-address-get-domain address num
     Return domain part of the NUMth email address from ADDRESS.


 -- Scheme procedure: mu-address-get-local address num
     Return local part of the NUMth email address from ADDRESS.


 -- Scheme procedure: mu-address-get-count address
     Return number of parts in email address ADDRESS.


 -- Scheme procedure: mu-username->email name
     Deduce user's email address from his username. If NAME is omitted,
     current username is assumed



File: mailutils.info,  Node: Mailbox Functions,  Next: Message Functions,  Prev: Address Functions,  Up: libmu_scm

3.3.2 Mailbox Functions
-----------------------

 -- Scheme procedure: mu-mail-directory url
     If URL is given, sets it as a name of the user's mail directory.
     Returns the current value of the mail directory.

 -- Scheme procedure: mu-folder-directory url
     If URL is given, sets it as a name of the user's folder directory.
     Returns the current value of the folder directory.

 -- Scheme procedure: mu-mailbox-open url mode
     Opens the mailbox specified by URL. MODE is a string, consisting of
     the characters described below, giving the access mode for the
     mailbox

     MODE          Meaning
     -------------------------------------------------------------- 
     r             Open for reading.
     w             Open for writing.
     a             Open for appending to the end of the mailbox.
     c             Create the mailbox if it does not exist.


 -- Scheme procedure: mu-mailbox-close mbox
     Closes mailbox MBOX.

 -- Scheme procedure: mu-mailbox-get-url mbox
     Returns url of the mailbox MBOX.

 -- Scheme procedure: mu-mailbox-get-port mbox mode
     Returns a port associated with the contents of the MBOX.  MODE is
     a string defining operation mode of the stream. It may contain any
     of the two characters: `r' for reading, `w' for writing.


 -- Scheme procedure: mu-mailbox-get-message mbox msgno
     Retrieve from message #MSGNO from the mailbox MBOX.

 -- Scheme procedure: mu-mailbox-messages-count mbox
     Returns number of messages in the mailbox MBOX.

 -- Scheme procedure: mu-mailbox-expunge mbox
     Expunges deleted messages from the mailbox MBOX.

 -- Scheme procedure: mu-mailbox-append-message mbox mesg
     Appends message MESG to the mailbox MBOX.


File: mailutils.info,  Node: Message Functions,  Next: MIME Functions,  Prev: Mailbox Functions,  Up: libmu_scm

3.3.3 Message Functions
-----------------------

 -- Scheme procedure: mu-message-create
     Creates an empty message.


 -- Scheme procedure: mu-message-copy mesg
     Creates the copy of the message MESG.


 -- Scheme procedure: mu-message-destroy mesg
     Destroys the message MESG.

 -- Scheme procedure: mu-message-set-header mesg header value replace
     Sets new VALUE to the header HEADER of the message MESG.  If
     HEADER is already present in the message its value is replaced
     with the supplied one if the optional REPLACE is #t. Otherwise, a
     new header is created and appended.

 -- Scheme procedure: mu-message-get-size mesg
     Returns the size of the message MESG .

 -- Scheme procedure: mu-message-get-lines mesg
     Returns number of lines in the given message.


 -- Scheme procedure: mu-message-get-sender mesg
     Returns email address of the sender of the message MESG.


 -- Scheme procedure: mu-message-get-header mesg header
     Returns value of the header HEADER from the message MESG.


 -- Scheme procedure: mu-message-get-header-fields mesg headers
     Returns the list of headers in the message MESG. Optional argument
     HEADERS gives a list of header names to restrict return value to.


 -- Scheme procedure: mu-message-set-header-fields mesg list replace
     Set the headers in the message MESG from LIST LIST is a list of
     conses (cons HEADER VALUE). The function sets these headers in the
     message MESG.  Optional parameter REPLACE specifies whether the
     new header values should replace the headers already present in the
     message.

 -- Scheme procedure: mu-message-delete mesg flag
     Mark the message MESG as deleted. Optional argument FLAG allows to
     toggle deletion mark. The message is deleted if it is `#t' and
     undeleted if it is `#f'

 -- Scheme procedure: mu-message-get-flag mesg flag
     Return value of the attribute FLAG of the message MESG.

 -- Scheme procedure: mu-message-set-flag mesg flag value
     Set the attribute FLAG of the message MESG. If optional VALUE is
     #f, the attribute is unset.

 -- Scheme procedure: mu-message-get-user-flag mesg flag
     Return the value of the user attribute FLAG from the message MESG.

 -- Scheme procedure: mu-message-set-user-flag mesg flag value
     Set the given user attribute FLAG in the message MESG. If optional
     argument VALUE is `#f', the attribute is unset.

 -- Scheme procedure: mu-message-get-port mesg mode full
     Returns a port associated with the given MESG. MODE is a string
     defining operation mode of the stream. It may contain any of the
     two characters: `r' for reading, `w' for writing.  If optional
     argument FULL is specified, it should be a boolean value.  If it
     is `#t' then the returned port will allow access to any part of
     the message (including headers). If it is `#f' then the port
     accesses only the message body (the default).


 -- Scheme procedure: mu-message-get-body mesg
     Returns the message body for the message MESG.

 -- Scheme procedure: mu-message-multipart? mesg
     Returns `#t' if MESG is a multipart MIME message.

 -- Scheme procedure: mu-message-get-num-parts mesg
     Returns number of parts in a multipart MIME message. Returns `#f'
     if the argument is not a multipart message.

 -- Scheme procedure: mu-message-get-part mesg part
     Returns part #PART from a multipart MIME message MESG.

 -- Scheme procedure: mu-message-send mesg mailer from to
     Sends the message MESG. Optional MAILER overrides default mailer
     settings in mu-mailer. Optional FROM and TO give sender and
     receiver addresses.


 -- Scheme procedure: mu-message-get-uid mesg
     Returns uid of the message MESG


 -- Scheme procedure: mu-body-read-line body
     Read next line from the BODY.

 -- Scheme procedure: mu-body-write body text
     Append TEXT to message BODY.


File: mailutils.info,  Node: MIME Functions,  Next: Logging Functions,  Prev: Message Functions,  Up: libmu_scm

3.3.4 MIME Functions
--------------------

 -- Scheme procedure: mu-mime-create flags mesg
     Creates a new MIME object. Both arguments are optional.  FLAGS
     specifies the type of the object to create (`0' is a reasonable
     value). MESG gives the message to create the MIME object from.

 -- Scheme procedure: mu-mime-multipart? mime
     Returns `#t' if MIME is a multipart object.


 -- Scheme procedure: mu-mime-get-num-parts mime
     Returns number of parts in the MIME object MIME.

 -- Scheme procedure: mu-mime-get-part mime num
     Returns NUMth part from the MIME object MIME.

 -- Scheme procedure: mu-mime-add-part mime mesg
     Adds MESG to the MIME object MIME.

 -- Scheme procedure: mu-mime-get-message mime
     Converts MIME object MIME to a message.



File: mailutils.info,  Node: Logging Functions,  Next: Other Functions,  Prev: MIME Functions,  Up: libmu_scm

3.3.5 Logging Functions
-----------------------

 -- Scheme procedure: mu-openlog ident option facility
     Opens a connection to the system logger for Guile program.  IDENT,
     OPTION and FACILITY have the same meaning as in openlog(3)

 -- Scheme procedure: mu-logger prio text
     Distributes TEXT via syslogd priority PRIO.

 -- Scheme procedure: mu-closelog
     Closes the channel to the system logger opened by `mu-openlog'.


File: mailutils.info,  Node: Other Functions,  Next: Direct Linking,  Prev: Logging Functions,  Up: libmu_scm

3.3.6 Other Functions
---------------------

 -- Scheme procedure: mu-register-format rest
     Registers desired mailutils formats. Any number of arguments can
     be given.  Each argument must be one of the following strings:

     Argument             Meaning
     -------------------------------------------------------------- 
     `mbox'               Regular UNIX mbox format
     `mh'                 MH mailbox format
     `maildir'            Maildir mailbox format
     `pop'                POP mailbox format
     `imap'               IMAP mailbox format
     `sendmail'           sendmail mailer format
     `smtp'               SMTP mailer format

     If called without arguments, the function registers all available
     formats


 -- Scheme procedure: mu-strerror err
     Return the error message corresponding to ERR, which must be an
     integer value.



File: mailutils.info,  Node: Direct Linking,  Next: Dynamic Linking,  Prev: Other Functions,  Up: libmu_scm

3.3.7 Direct Linking
--------------------

If you plan to link your program directly to `libguile', it will
probably make sense to link `libmu_scm' directly as well. The arguments
to the program loader may be obtained by running

     mailutils-config --link guile
   *Note mailutils-config::, for more information about this utility.

   Here is a sample Makefile fragment:

     MU_LDFLAGS=`mailutils-config --link guile`
     MU_INCLUDES=`mailutils-config --include`

     myprog: myprog.c
             $(CC) -omyprog $(CFLAGS) $(MU_INCLUDES) myprog.c $(MU_LDFLAGS)


File: mailutils.info,  Node: Dynamic Linking,  Prev: Direct Linking,  Up: libmu_scm

3.3.8 Dynamic Linking
---------------------

Dynamic linking is the preferred method of using `libmu_scm'. It uses
Guile "use-modules" mechanism. An interface module `mailutils.scm' is
provided in order to facilitate using this method. This module is
installed in the package data directory (by default it is
`PREFIX/share/mailutils'). A sample use of this module is:

     (set! %load-path (list "/usr/local/share/mailutils"))
     (use-modules (mailutils))

     # Now you may use mailutils functions:

     (let ((mb (mu-mailbox-open "/var/spool/mail/gray" "r")))
     ...

   _Note_, that you should explicitly modify the `%load-path' before
calling `use-modules', otherwise Guile will not be able to find
`mailutils.scm'.


File: mailutils.info,  Node: libmu_sieve,  Prev: libmu_scm,  Up: Libraries

3.4 Sieve Library
=================

`Libmu_sieve' is GNU implementation of the mail filtering language
Sieve. The library is built around a "Sieve Machine" -- an abstract
computer constructed specially to handle mail filtering tasks.  This
computer has two registers: program counter and numeric accumulator; a
runtime stack of unlimited depth and the code segment. A set of
functions is provided for creating and destroying instances of Sieve
Machine, manipulating its internal data, compiling and executing a
sieve program.

   The following is a typical scenario of using `libmu_sieve':

  1. Application program creates the instance of sieve machine.

  2. Then `mu_sieve_compile' function is called to translate the Sieve
     source into an equivalent program executable by the Machine

  3. A mailbox is opened and associated with the Machine

  4. The Machine executes the program over the mailbox

  5. When the execution of the program is finished, all messages upon
     which an action was executed other than `keep' are marked with the
     delete flag. Thus, running `mailbox_expunge' upon the mailbox
     finishes the job, leaving in the mailbox only those messages that
     were preserved by the filter.

  6. Finally, the instance of Sieve Machine is destroyed and the
     resources allocated for it are reclaimed.


   The following sections describe in detail the functions from the
Sieve Library.

* Menu:

* Sieve Data Types::
* Manipulating the Sieve Machine::
* Logging and Diagnostic Functions::
* Symbol Space Functions::
* Memory Allocation::
* Compiling and Executing the Script::
* Writing Loadable Commands::


File: mailutils.info,  Node: Sieve Data Types,  Next: Manipulating the Sieve Machine,  Up: libmu_sieve

3.4.1 Sieve Data Types
----------------------

 -- Data Type: sieve_machine_t
     This is an opaque data type representing a pointer to an instance
     of sieve machine. The `sieve_machine_t' keeps all information
     necessary for compiling and executing the script.

     It is created by `sieve_machine_create()' and destroyed by
     `sieve_machine_destroy()'. The functions for manipulating this data
     type are described in *note Manipulating the Sieve Machine::.

 -- Data Type: mu_sieve_data_type
     This enumeration keeps the possible types of sieve data. These are:

    `SVT_VOID'
          No datatype.

    `SVT_NUMBER'
          Numeric type.

    `SVT_STRING'
          Character string.

    `SVT_STRING_LIST'
          A `mu_list_t'. Each item in this list represents a character
          string.

    `SVT_TAG'
          A sieve tag. See `mu_sieve_runtime_tag_t' below.

    `SVT_IDENT'
          A character string representing an identifier.

    `SVT_VALUE_LIST'
          A `mu_list_t'. Each item in this list is of
          `mu_sieve_value_t' type.

    `SVT_POINTER'
          An opaque pointer.

 -- Data Type: mu_sieve_value_t
     The `mu_sieve_value_t' keeps an instance of sieve data. It is
     defined as follows:

          typedef struct
          {
            mu_sieve_data_type type;        /* Type of the data */
            union {
              char *string;                 /* String value or identifier */
              size_t number;                /* Numeric value */
              mu_list_t list;               /* List value */
              mu_sieve_runtime_tag_t *tag;  /* Tag value */
              void *ptr;                    /* Pointer value */
            } v;
          }
          mu_sieve_value_t;

     Depending on the value of `type' member, following members of the
     union `v' keep the actual value:

    `SVT_VOID'
          Never appears.

    `SVT_NUMBER'
          The numeric value is kept in `number' member.

    `SVT_STRING'
          The string is kept in `string' member.

    `SVT_STRING_LIST'
    `SVT_VALUE_LIST'
          The list itself is pointed to by `list' member

    `SVT_TAG'
          The tag value is pointed to by `tag' member.

    `SVT_IDENT'
          The `string' member points to the identifier name.

    `SVT_POINTER'
          The data are pointed to by `ptr' member.


 -- Data Type: mu_sieve_tag_def_t
     This structure represents a definition of a tagged (optional)
     argument to a sieve action or test. It is defined as follows:

          typedef struct
          {
            char *name;                 /* Tag name */
            mu_sieve_data_type argtype; /* Type of tag argument. */
          }
          mu_sieve_tag_def_t;

     The `name' member points to the tag's name _without leading
     colon_. The `argtype' is set to `SVT_VOID' if the tag does not
     take argument, or to the type of the argument otherwise.

 -- Data Type: mu_sieve_runtime_tag_t
     This structure represents the tagged (optional) argument at a
     runtime.  It is defined as:

          struct mu_sieve_runtime_tag
          {
            char *tag;                   /* Tag name */
            mu_sieve_value_t *arg;       /* Tag argument (if any) */
          };

     The `arg' member is `NULL' if the tag does not take an argument.

 -- Data Type: mu_sieve_locus_t
     Objects of this type represent a location in the Sieve source file:

          typedef struct
          {
            const char *source_file;
            size_t source_line;
          }
          mu_sieve_locus_t;

 -- Data Type: mu_sieve_handler_t
     This is a pointer to function handler for a sieve action or test.
     It is defined as follows:
          typedef int (*mu_sieve_handler_t) (mu_sieve_machine_t MACH,
                                             mu_list_t ARGS,
                                             mu_list_t TAGS);

     The arguments to the handler have the following meaning:

    MACH
          Sieve machine being processed.

    ARGS
          A list of required arguments to the handler

    TAGS
          A list of optional arguments (tags).

 -- Data Type: mu_sieve_printf_t
     A pointer to a diagnostic output function. It is defined as
     follows:
          typedef int (*mu_sieve_printf_t) (void *DATA,
                                            const char *FMT, va_list AP);

    DATA
          A pointer to application specific data. These data are passed
          as second argument to `mu_sieve_machine_init()'.

    FMT
          Printf-like format string.

    AP
          Other arguments.

 -- Data Type: mu_sieve_parse_error_t
     This data type is declared as follows:
          typedef int (*mu_sieve_parse_error_t) (void *DATA,
                                                 const char *FILENAME,
                                                 int LINENO,
                                                 const char *FMT,
                                                 va_list AP);

     It is used to declare error handlers for parsing errors. The
     application-specific data are passed in the DATA argument.
     Arguments FILENAME and LINE indicate the location of the error in
     the source text, while FMT and AP give verbose description of the
     error.

 -- Data Type: mu_sieve_action_log_t
     A pointer to the application-specific logging function:

          typedef void (*mu_sieve_action_log_t) (void *DATA,
                                                 const mu_sieve_locus_t *LOCUS,
                                                 size_t MSGNO,
                                                 mu_message_t MSG,
                                                 const char *ACTION,
                                                 const char *FMT,
                                                 va_list AP);

    DATA
          Application-specific data.

    LOCUS
          Location in the Sieve source file.

    SCRIPT
          Name of the sieve script being executed.

    MSGNO
          Ordinal number of the message in mailbox, if appropriate.
          When execution is started using `sieve_message()', this
          argument is zero.

    MSG
          The message this action is executed upon.

    ACTION
          The name of the action.

    FMT
    VAR
          These two arguments give the detailed description of the
          action.

 -- Data Type: mu_sieve_relcmp_t
 -- Data Type: mu_sieve_relcmpn_t
          typedef int (*mu_sieve_relcmp_t) (int, int);
          typedef int (*mu_sieve_relcmpn_t) (size_t, size_t);

 -- Data Type: mu_sieve_comparator_t
          typedef int (*mu_sieve_comparator_t) (const char *, const char *);

     A pointer to the comparator handler function. The function compares
     its two operands and returns 1 if they are equal, and 0 otherwise.
     _Notice_, that the sense of the return value is inverted in
     comparison with most standard libc functions like `stcmp()', etc.


 -- Data Type: mu_sieve_retrieve_t
          typedef int (*mu_sieve_retrieve_t) (void *item, void *data, int idx,
                                              char **pval);

     A pointer to generic retriever function. See description of
     `mu_sieve_vlist_compare()' for details of its usage.

 -- Data Type: mu_sieve_destructor_t
          typedef void (*mu_sieve_destructor_t) (void *data);

     A pointer to destructor function. The function frees any resources
     associated with `data'. See the description of
     `mu_sieve_machine_add_destructor()' for more information.

 -- Data Type: mu_sieve_tag_checker_t
          typedef int (*mu_sieve_tag_checker_t) (const char *NAME,
                                                 mu_list_t TAGS,
                                                 mu_list_t ARGS)

     A pointer to tag checker function. The purpose of the function is
     to perform compilation-time consistency test on tags. Its
     arguments are:

    NAME
          Name of the test or action whose tags are being checked.

    TAGS
          A list of `mu_sieve_runtime_tag_t' representing tags.

    ARGS
          A list of `mu_sieve_value_t' representing required arguments
          to NAME.

     The function is allowed to make any changes in TAGS and ARGS. It
     should return 0 if the syntax is correct and non-zero otherwise.
     It is responsible for issuing the diagnostics in the latter case.
     [FIXME: describe how to do that]



File: mailutils.info,  Node: Manipulating the Sieve Machine,  Next: Logging and Diagnostic Functions,  Prev: Sieve Data Types,  Up: libmu_sieve

3.4.2 Manipulating the Sieve Machine
------------------------------------

This subsection describes functions used to create an instance of the
sieve machine, read or alter its internal fields and destroy it.

 -- Function: int mu_sieve_machine_init (mu_sieve_machine_t *MACH, void
          *DATA)
     The `mu_sieve_machine_init()' function creates an instance of a
     sieve machine. A pointer to the instance itself is returned in the
     argument MACH. The user-specific data to be associated with the
     new machine are passed in DATA argument. The function returns 0 on
     success, non-zero error code otherwise,

 -- Function: void mu_sieve_machine_destroy (mu_sieve_machine_t *PMACH)
     This function destroys the instance of sieve machine pointed to by
     MACH parameter. After execution of `mu_sieve_machine_destroy()'
     PMACH contains `NULL'. The destructors registered with
     `mu_sieve_machine_add_destructor()' are executed in LIFO order.

 -- Function: int mu_sieve_machine_add_destructor (mu_sieve_machine_t
          MACH, mu_sieve_destructor_t DESTR, void *PTR);
     This function registers a destructor function DEST. The purpose of
     the destructor is to free any resources associated with the item
     PTR. The destructor function takes a single argument -- a pointer
     to the data being destroyed. All registered destructors are called
     in reverse order upon execution of `mu_sieve_machine_destroy()'.
     Here's a short example of the use of this function:

          static void
          free_regex (void *data)
          {
            regfree ((regex_t*)data);
          }

          int
          match_part_checker (const char *name, list_t tags, list_t args)
          {
            regex_t *regex;

            /* Initialise the regex: */
            regex = mu_sieve_malloc (mach, sizeof (*regex));
            /* Make sure it will be freed when necessary */
            mu_sieve_machine_add_destructor (sieve_machine, free_regex, regex);
            .
            .
            .
          }

 -- Function: void * mu_sieve_get_data (mu_sieve_machine_t MACH)
     This function returns the application-specific data associated with
     the instance of sieve machine. See `mu_sieve_machine_init()'.

 -- Function: mu_message_t mu_sieve_get_message (mu_sieve_machine_t
          MACH)
     This function returns the current message.

 -- Function: size_t mu_sieve_get_message_num (mu_sieve_machine_t MACH)
     This function returns the current message number in the mailbox.
     If there are no mailbox, i.e. the execution of the sieve code is
     started with `mu_sieve_message', this function returns 1.

 -- Function: int mu_sieve_get_debug_level (mu_sieve_machine_t MACH)
     Returns the debug level set for this instance of sieve machine.

 -- Function: mu_ticket_t mu_sieve_get_ticket (mu_sieve_machine_t MACH)
     Returns the authentication ticket for this machine.

 -- Function: mu_mailer_t mu_sieve_get_mailer (mu_sieve_machine_t MACH)
     Returns the mailer.

 -- Function: int mu_sieve_get_locus (mu_sieve_machine_t MACH,
          mu_sieve_locus_t *LOCUS)
     Returns the locus in the Sieve source file corresponding to the
     code pointer where the Sieve machine currently is.

 -- Function: char * mu_sieve_get_daemon_email (mu_sieve_machine_t MACH)
     This function returns the "daemon email" associated with this
     instance of sieve machine. The daemon email is an email address
     used in envelope from addresses of automatic reply messages. By
     default its local part is `<MAILER-DAEMON>' and the domain part is
     the machine name.

 -- Function: void mu_sieve_set_error (mu_sieve_machine_t MACH,
          mu_sieve_printf_t ERROR_PRINTER)
     This function sets the error printer function for the machine. If
     it is not set, the default error printer will be used. It is
     defined as follows:

          int
          _sieve_default_error_printer (void *unused, const char *fmt,
                                        va_list ap)
          {
            return mu_verror (fmt, ap);
          }

 -- Function: void mu_sieve_set_parse_error (mu_sieve_machine_t MACH,
          mu_sieve_parse_error_t P)
     This function sets the parse error printer function for the
     machine. If it is not set, the default parse error printer will be
     used. It is defined as follows:

          int
          _sieve_default_parse_error (void *unused,
                                      const char *filename, int lineno,
                                      const char *fmt, va_list ap)
          {
            if (filename)
              fprintf (stderr, "%s:%d: ", filename, lineno);
            vfprintf (stderr, fmt, ap);
            fprintf (stderr, "\n");
            return 0;
          }

 -- Function: void mu_sieve_set_debug (mu_sieve_machine_t MACH,
          mu_sieve_printf_t DEBUG);
     This function sets the debug printer function for the machine. If
     it is not set, the default debug printer is `NULL' which means no
     debugging information will be displayed.

 -- Function: void mu_sieve_set_debug_level (mu_sieve_machine_t MACH,
          mu_debug_t DBG, int LEVEL)
     This function sets the debug level for the given instance of sieve
     machine. The DBG argument is the `mu_debug_t' object to be used
     with mailutils library, the LEVEL argument specifies the debugging
     level for the sieve library itself. It is a bitwise or of the
     following values:

    `MU_SIEVE_DEBUG_TRACE'
          Trace the execution of the sieve script.

    `MU_SIEVE_DEBUG_INSTR'
          Print the sieve machine instructions as they are executed.

    `MU_SIEVE_DEBUG_DISAS'
          Dump the disassembled code of the sieve machine. Do not run
          it.

    `MU_SIEVE_DRY_RUN'
          Do not executed the actions, only show what would have been
          done.

 -- Function: void mu_sieve_set_logger (mu_sieve_machine_t MACH,
          mu_sieve_action_log_t LOGGER)
     This function sets the logger function. By default the logger
     function is `NULL', which means that the executed actions are not
     logged.

 -- Function: void mu_sieve_set_ticket (mu_sieve_machine_t MACH,
          mu_ticket_t TICKET)
     This function sets the authentication ticket to be used with this
     machine.

 -- Function: void mu_sieve_set_mailer (mu_sieve_machine_t MACH,
          mu_mailer_t MAILER)
     This function sets the mailer. The default mailer is `"sendmail:"'.

 -- Function: void mu_sieve_set_daemon_email (mu_sieve_machine_t MACH,
          const char *EMAIL)
     This functions sets the "daemon email" for `reject' and `redirect'
     actions.

 -- Function: int mu_sieve_is_dry_run (mu_sieve_machine_t MACH)
     The `mu_sieve_is_dry_run()' returns 1 if the machine is in "dry
     run" state, i.e. it will only log the actions that would have been
     executed without actually executing them. The dry run state is set
     by calling `mu_sieve_set_debug_level()' if its last argument has
     the `MU_SIEVE_DRY_RUN' bit set.

 -- Function: const char * mu_sieve_type_str (mu_sieve_data_type TYPE)
     Returns the string representation for the given sieve data type.
     The return value is a pointer to a static constant string.


File: mailutils.info,  Node: Logging and Diagnostic Functions,  Next: Symbol Space Functions,  Prev: Manipulating the Sieve Machine,  Up: libmu_sieve

3.4.3 Logging and Diagnostic Functions
--------------------------------------

 -- Function: void mu_sieve_error (mu_sieve_machine_t MACH, const char
          *FMT, ...)
     Format and output an error message using error printer of the
     machine MACH.

 -- Function: void mu_sieve_debug (mu_sieve_machine_t MACH, const char
          *FMT, ...)
     Format and output a debug message using debug printer of the
     machine MACH.

 -- Function: void mu_sieve_log_action (mu_sieve_machine_t MACH, const
          char *ACTION, const char *FMT, ...)
     Log a sieve action using logger function associated with the
     machine MACH.

 -- Function: void mu_sieve_abort (mu_sieve_machine_t MACH)
     Immediately abort the execution of the script.


File: mailutils.info,  Node: Symbol Space Functions,  Next: Memory Allocation,  Prev: Logging and Diagnostic Functions,  Up: libmu_sieve

3.4.4 Symbol Space Functions
----------------------------

 -- Function: mu_sieve_register_t * mu_sieve_test_lookup
          (mu_sieve_machine_t MACH, const char *NAME)
     Find a register object describing the test NAME. Returns `NULL' if
     no such test exists.

 -- Function: mu_sieve_register_t * mu_sieve_action_lookup
          (mu_sieve_machine_t MACH, const char *NAME)
     Find a register object describing the action NAME. Returns `NULL'
     if no such action exists.

 -- Function: int mu_sieve_register_test (mu_sieve_machine_t MACH,
          const char *NAME, mu_sieve_handler_t HANDLER,
          mu_sieve_data_type *ARG_TYPES, mu_sieve_tag_group_t *TAGS,
          int REQUIRED)

 -- Function: int mu_sieve_register_action (mu_sieve_machine_t MACH,
          const char *NAME, mu_sieve_handler_t HANDLER,
          mu_sieve_data_type *ARG_TYPES, mu_sieve_tag_group_t *TAGS,
          int REQUIRED)

 -- Function: int mu_sieve_register_comparator (mu_sieve_machine_t
          MACH, const char *NAME, int REQUIRED, mu_sieve_comparator_t
          IS, mu_sieve_comparator_t CONTAINS, mu_sieve_comparator_t
          MATCHES, mu_sieve_comparator_t REGEX, mu_sieve_comparator_t
          EQ)

 -- Function: int mu_sieve_tag_lookup (mu_list_t TAGLIST, char *NAME,
          mu_sieve_value_t **ARG)

 -- Function: int mu_sieve_load_ext (mu_sieve_machine_t MACH, const
          char *NAME)


File: mailutils.info,  Node: Memory Allocation,  Next: Compiling and Executing the Script,  Prev: Symbol Space Functions,  Up: libmu_sieve

3.4.5 Memory Allocation
-----------------------

The following functions act as their libc counterparts. The allocated
memory is associated with the MACH argument and is automatically freed
upon the call to `mu_sieve_machine_destroy (MACH)'.

 -- Function: void * mu_sieve_malloc (mu_sieve_machine_t MACH, size_t
          SIZE)
     Allocates SIZE bytes and returns a pointer to the allocated memory.

 -- Function: char * mu_sieve_mstrdup (mu_sieve_machine_t MACH, const
          char *STR)
     This function returns a pointer to a new string  which is a
     duplicate of the string STR.

 -- Function: void * mu_sieve_mrealloc (mu_sieve_machine_t MACH, void
          *PTR, size_t SIZE)
     Changes the size of the memory block pointed to by PTR to SIZE
     bytes. The contents will be unchanged to the minimum of the old
     and new sizes; newly allocated memory will be uninitialized. If
     PTR is `NULL', the call is equivalent to `mu_sieve_malloc(MACH,
     SIZE)'; if SIZE is equal to zero, the call is equivalent to
     `mu_sieve_mfree(PTR)'. Unless PTR is `NULL', it must have been
     returned by an earlier call to `mu_sieve_malloc()' or
     `mu_sieve_mrealloc()'.

 -- Function: void mu_sieve_mfree (mu_sieve_machine_t MACH, void *PTR)
     `mu_sieve_mfree()' frees the memory space pointed to by PTR and
     detaches it from the destructor list of MACH. The PTR must have
     been returned by a previous call to `mu_sieve_malloc()' or
     `mu_sieve_mrealloc()'. Otherwise, or if `mu_sieve_mfree(PTR)' has
     already been called before, undefined behaviour occurs.

     If PTR is `NULL', no operation is performed.


File: mailutils.info,  Node: Compiling and Executing the Script,  Next: Writing Loadable Commands,  Prev: Memory Allocation,  Up: libmu_sieve

3.4.6 Compiling and Executing the Script
----------------------------------------

 -- Function: int mu_sieve_compile (mu_sieve_machine_t MACH, const char
          *NAME)
     Compile the sieve script from the file NAME.

 -- Function: int mu_sieve_mailbox (mu_sieve_machine_t MACH,
          mu_mailbox_t MBOX)
     Execute the code from the given instance of sieve machine MACH
     over each message in the mailbox MBOX.

 -- Function: int mu_sieve_message (mu_sieve_machine_t MACH,
          mu_message_t MESSAGE)
     Execute the code from the given instance of sieve machine MACH
     over the MESSAGE.

 -- Function: int mu_sieve_disass (mu_sieve_machine_t MACH)
     Dump the disassembled code of the sieve machine MACH.


File: mailutils.info,  Node: Writing Loadable Commands,  Prev: Compiling and Executing the Script,  Up: libmu_sieve

3.4.7 Writing Loadable Commands
-------------------------------

This section contains an example of how to write external loadable
commands for GNU libmu_sieve.


     /*  This is an example on how to write extension tests for GNU sieve.
         It provides test "numaddr".

         Syntax:   numaddr [":over" / ":under"] <header-names: string-list>
                   <limit: number>

         The "numaddr" test counts Internet addresses in structured headers
         that contain addresses.  It returns true if the total number of
         addresses satisfies the requested relation:

         If the argument is ":over" and the number of addresses is greater than
         the number provided, the test is true; otherwise, it is false.

         If the argument is ":under" and the number of addresses is less than
         the number provided, the test is true; otherwise, it is false.

         If the argument is empty, ":over" is assumed. */

     #ifdef HAVE_CONFIG_H
     # include <config.h>
     #endif

     #include <stdlib.h>
     #include <mailutils/sieve.h>

     struct val_ctr {  /* Data passed to the counter function */
       mu_header_t hdr;   /* Headers of the current message */
       size_t limit;   /* Limit for the number of addresses */
       size_t count;   /* Number of addresses counted so far */
     };

     /* Count addresses in a single header value.

        Input:
          ITEM is the name of the header to scan.
          DATA is a pointer to the val_ctr structure
        Return value:
          non-zero if the limit on the number of addresses has been reached. */

     static int
     _count_items (void *item, void *data)
     {
       char *name = item;
       struct val_ctr *vp = data;
       char *val;
       mu_address_t addr;
       size_t count = 0;

       if (mu_header_aget_value (vp->hdr, name, &val))
         return 0;
       if (mu_address_create (&addr, val) == 0)
         {
           mu_address_get_count (addr, &count);
           mu_address_destroy (&addr);
           vp->count += count;
         }
       free (val);
       return vp->count >= vp->limit;
     }

     /* Handler for the numaddr test */
     static int
     numaddr_test (mu_sieve_machine_t mach, mu_list_t args, mu_list_t tags)
     {
       mu_sieve_value_t *h, *v;
       struct val_ctr vc;
       int rc;

       if (mu_sieve_get_debug_level (mach) & MU_SIEVE_DEBUG_TRACE)
         {
           mu_sieve_locus_t locus;
           mu_sieve_get_locus (mach, &locus);
           mu_sieve_debug (mach, "%s:%lu: NUMADDR\n",
     		   locus.source_file,
     		   (unsigned long) locus.source_line);
         }

       /* Retrieve required arguments: */
       /* First argument: list of header names */
       h = mu_sieve_value_get (args, 0);
       if (!h)
         {
           mu_sieve_error (mach, "numaddr: can't get argument 1");
           mu_sieve_abort (mach);
         }
       /* Second argument: Limit on the number of addresses */
       v = mu_sieve_value_get (args, 1);
       if (!v)
         {
           mu_sieve_error (mach, "numaddr: can't get argument 2");
           mu_sieve_abort (mach);
         }

       /* Fill in the val_ctr structure */
       mu_message_get_header (mu_sieve_get_message (mach), &vc.hdr);
       vc.count = 0;
       vc.limit = v->v.number;

       /* Count the addresses */
       rc = mu_sieve_vlist_do (h, _count_items, &vc);

       /* Here rc >= 1 iff the counted number of addresses is greater or equal
          to vc.limit. If `:under' tag was given we reverse the return value */
       if (mu_sieve_tag_lookup (tags, "under", NULL))
         rc = !rc;

       return rc;
     }

     /* Syntactic definitions for the numaddr test */

     /* Required arguments: */
     static mu_sieve_data_type numaddr_req_args[] = {
       SVT_STRING_LIST,
       SVT_NUMBER,
       SVT_VOID
     };

     /* Tagged arguments: */
     static mu_sieve_tag_def_t numaddr_tags[] = {
       { "over", SVT_VOID },
       { "under", SVT_VOID },
       { NULL }
     };

     static mu_sieve_tag_group_t numaddr_tag_groups[] = {
       { numaddr_tags, NULL },
       { NULL }
     };

     /* Initialization function. It is the only function exported from this
        module. */
     int
     SIEVE_EXPORT(numaddr,init) (mu_sieve_machine_t mach)
     {
       return mu_sieve_register_test (mach, "numaddr", numaddr_test,
                                   numaddr_req_args, numaddr_tag_groups, 1);
     }


File: mailutils.info,  Node: Sieve Language,  Next: Reporting Bugs,  Prev: Libraries,  Up: Top

4 Sieve Language
****************

The input language understood by the GNU Sieve Library is a superset of
the Sieve language as described in RFC 3028.

* Menu:

* Lexical Structure::
* Syntax::
* Preprocessor::
* Require Statement::
* Comparators::
* Tests::
* Actions::
* GNU Extensions::


File: mailutils.info,  Node: Lexical Structure,  Next: Syntax,  Up: Sieve Language

4.1 Lexical Structure
=====================

Whitespace and Comments
-----------------------

Comments are semantically equivalent to whitespace and can be used
anyplace that whitespace is (with one exception in multi-line strings,
as described below).

   There are two kinds of comments: hash comments, that begin with a
`#' character that is not contained within a string and continue until
the next newline, and C-style or bracketed comments, that are delimited
by `/*' and `*/' tokens. The bracketed comments may span multiple
lines. E.g.:

     if size :over 100K
       { # this is a comment
         discard;
       }

     if size :over 100K
       { /* this is a comment
            this is still a comment */ discard /* this is a comment again
          */ ;
       }

   Like in C, bracketed comments do not nest.

Lexical Tokens
--------------

The basic lexical entities are "identifiers" and "literals".

   An "identifier" is a sequence of letters, digits and underscores,
that begins with a letter or underscore. For example, `header' and
`check_822_again' are valid identifiers, whereas `1st' is not.  A
special form of identifier is "tag": it is an identifier prefixed with
a colon (`:'), e.g.: `:comparator'.

   A "literal" is a data that is not executed, merely evaluated "as
is", to be used as arguments to commands. There are four kinds of
literals:

   * Number 

     "Numbers" are given as ordinary unsigned decimal numbers. An
     optional suffix may be used to indicate a multiple of a power of
     two.  The suffixes are: `K' specifying "kibi-", or 1,024 (2^10)
     times the value of the number; `M' specifying "mebi-", or 1,048,576
     (2^20) times the value of the number; and `G' specifying "tebi-",
     or 1,073,741,824 (2^30) times the value of the number.

     The numbers have 32 bits of magnitude.

   * String A "string" is any sequence of characters enclosed in double
     quotes (`"'). A string cannot contain newlines and double quote
     characters. This limitation will disappear in future releases.

   * Multiline Strings A "multiline string" is used to represent large
     blocks of text with embedded newlines and special characters. It
     starts with the keyword `text:' followed by a newline and ends
     with a dot (`.') on a newline by itself. Any characters between
     these two markers are taken verbatim. For example:

          text:
          ** This is an automatic response from my message **
          ** filtering program.                            **

          I can not attend your message right now. However it
          will be saved, and I will read it as soon as I am back.

          Regards,
          Fred
          .

     Notice that a hashed comment or whitespace may occur between
     `text:' and the newline. However, when used inside the multiline
     string a hash sign looses its special meaning (except in one case,
     see below) and is taken as is, as well as bracketed comment
     delimiters.  In other words, no comments are allowed within a
     multiline string. E.g.:

          text: # This is a comment

          Sample text
          # This line is taken verbatim
          /* And this line too */
          .

     The only exception to this rule is that preprocessor `include'
     statement is expanded as usual when found within a multiline string
     (*note Preprocessor::), e.g.:

          text:
          #include <myresponse.txt>
          .

     This results in the contents of file `myresponse.txt' being read
     and interpreted as the contents of the multiline string.

     GNU libmu_sieve extends the described syntax as follows. If the
     keyword `text:' is immediately followed by a dash (`-'), then all
     leading tab characters are stripped from input lines and the line
     containing delimiter (`.'). This allows multiline strings within
     scripts to be indented in a natural fashion.

     Furthermore, if the `text:' (optionally followed by `-') is
     immediately followed by a word, this word will be used as ending
     delimiter of multiline string instead of the default dot. For
     example:

          if header "from" "me@example.com"
            {
              reject text:-EOT
                  I do not accept messages from
                  this address.
                  .
                  .
                  EOT
               # Notice that this the multiline string ends here.
               # The single dots above will be part of it.
              ;
            }

   * String Lists 

     A "string list" is a comma-delimited list of quoted strings,
     enclosed in a pair of square brackets, e.g.:

          ["me@example.com", "me00@landru.example.edu"]

     For convenience, in any context where a list of strings is
     appropriate, a single string is allowed without being a member of
     a list: it is equivalent to a list with a single member. For
     example, the following two statements are equivalent:

          exists "To";
          exists ["To"];



File: mailutils.info,  Node: Syntax,  Next: Preprocessor,  Prev: Lexical Structure,  Up: Sieve Language

4.2 Syntax
==========

Being designed for the sole purpose of filtering mail, Sieve has a very
simple syntax.

* Menu:

* Commands::
* Actions Described::
* Control Flow::
* Tests and Conditions::


File: mailutils.info,  Node: Commands,  Next: Actions Described,  Up: Syntax

4.2.1 Commands
--------------

The basic syntax element is a "command". It is defined as follows:

     COMMAND-NAME [TAGS] ARGS
   where COMMAND-NAME is an identifier representing the name of the
command, TAGS is an optional list of "optional" or "tagged arguments"
and ARGS is a list of "required" or "positional arguments".

   Positional arguments are literals delimited with whitespace. They
provide the command with the information necessary to its proper
functioning. Each command has a fixed number of positional arguments. It
is an error to supply more arguments to the command or to give it fewer
arguments than it accepts.

   Optional arguments allow to modify the behaviour of the command, like
command line options in UNIX do. They are a list of "tags" (*note
Lexical Structure::) separated by whitespace. An optional argument may
have at most one parameter.

   Each command understands a set of optional arguments. Supplying it
tags that it does not understand results in an error.

   For example, consider the following command

     header :mime :comparator "i;octet" ["to", "from"] "bug-mailutils@gnu.org"

Here, given that `header' takes two positional arguments: `header' is
command name, the list `["to", "from"]' is first positional argument
and the string `"bug-mailutils@gnu.org"' is second positional argument.
There are two optional arguments: `:mime' and `:comparator'. The latter
has a string `"i;octet"' as its parameter.


File: mailutils.info,  Node: Actions Described,  Next: Control Flow,  Prev: Commands,  Up: Syntax

4.2.2 Actions Described
-----------------------

An "action" is a Sieve command that performs some operation over a
message. Actions do the main job in any Sieve program. Syntactically,
an action is a command terminated with semicolon, e.g.:

     keep;

     fileinto "mbox";

   GNU Sieve provides the full set of actions described in RFC 3028.
It also allows to extend this set using loadable actions. *Note
Actions::, for detailed discussion of actions.


File: mailutils.info,  Node: Control Flow,  Next: Tests and Conditions,  Prev: Actions Described,  Up: Syntax

4.2.3 Control Flow
------------------

The only control flow statement Sieve has is `if' statement. In its
simplest form it is:

     if `condition' { ... }

   The effect of this statement is that the sequence of actions between
the curly braces is executed only if the `condition' evaluates to
`true'.

   A more elaborate form of this statement allows to execute two
different sets of actions depending on whether the condition is true or
not:

     if `condition' { ... } else { ... }

   The most advanced form of the "if" statement allows to select an
action depending on what condition from the set of conditions is met.

     if `cond1' { ... } elsif `cond2' { ... } else { ... }

   There may be any number of "elsif" branches in an "if" statement.
However it may have at most one "else" branch.  Notes for C programmers:

  1. The braces surrounding each branch of an "if" statement are
     required.

  2. The "else if" construct is disallowed. Use "elsif" keyword instead.

   Here's an example of "if" statement:

     if header :contains "from" "coyote"
       {
         discard;
       }
     elsif header :contains ["subject"] ["$$$"]
       {
         discard;
       }
     else
       {
         fileinto "INBOX";
       }

   The following section describes in detail conditions used in "if"
statements.


File: mailutils.info,  Node: Tests and Conditions,  Prev: Control Flow,  Up: Syntax

4.2.4 Tests and Conditions
--------------------------

"Tests" are Sieve commands that return boolean value. E.g. the test

     header :contains "from" "coyote"

returns true only if the header "From" of the current message contains
substring "coyote".

   The tests shipped with the GNU Sieve are described in *note Tests::.

   "Condition" is a Sieve expression that evaluates to `true' or
`false'. In its simplest form, condition is just a Sieve test.

   To reverse the sense of a condition use keyword `not', e.g.:

     not header :contains "from" "coyote"

   The results of several conditions may be joined together by logical
`and' and `or' operations. The special form `allof' takes several tests
as its arguments and computes the logical `and' of their results.
Similarly, the form `anyof' performs logical `or' over the results of
its arguments. E.g.:

     if anyof (not exists ["From", "Date"],
               header :contains "from" "fool@example.edu")
       {
         discard;
       }


File: mailutils.info,  Node: Preprocessor,  Next: Require Statement,  Prev: Syntax,  Up: Sieve Language

4.3 Preprocessor
================

Preprocessor statements are a GNU extension to the Sieve language.  The
syntax for a preprocessor statement is similar to that used in `C'
programming language, i.e. a pound character (`#') followed by a
preprocessor directive and its arguments. Any amount of whitespace can
be inserted between the `#' and the directive.  Currently implemented
directives are `include' and `searchpath'.

* Menu:

* #include::        Include the contents of a file.
* #searchpath::     Modify the current search path.


File: mailutils.info,  Node: #include,  Next: #searchpath,  Up: Preprocessor

Sieve #include directive
------------------------

The `#include' directive reads in the contents of the given file.  The
contents is "inserted" into the text being parsed starting at the line
where the directive appears. The directive takes two forms:

`#include "FILENAME"'
     The FILENAME is taken relative to the current directory.

`#include <FILENAME>"'
     The FILENAME is searched in the list of include directories as
     specified by the `-I' command line options.

   If FILENAME starts with a directory separator character (`/') both
forms have the same effect.


File: mailutils.info,  Node: #searchpath,  Prev: #include,  Up: Preprocessor

Sieve #searchpath directive
---------------------------

The `#searchpath' directive adds its argument to the list of
directories searched for loadable modules. It has the same effect as
`library-path' Sieve configuration statement (*note library-path: Sieve
Configuration.).


File: mailutils.info,  Node: Require Statement,  Next: Comparators,  Prev: Preprocessor,  Up: Sieve Language

4.4 Require Statement
=====================

     Syntax:   require STRING;
               require STRING-LIST;

   The require statement informs the parser that a script makes use of
a certain extension. Multiple capabilities can be declared using the
second form of the statement. The actual handling of a capability name
depends on its suffix.

   If the name starts with `comparator-', it is understood as a request
to use the specified comparator. The comparator name consists of the
characters following the suffix.

   If the name starts with `test-', it means a request to use the given
test. The test name consists of the characters following the suffix.

   Otherwise, the capability is understood as a name of an action to be
used.

   The `require' statement, if present, must be used before any other
statement that is using the required capability. As an extension, the
GNU sieve allows the `require' and any other statements to be
interspersed.

   By default the following actions and comparators need not be
explicitly required:

   * stop

   * keep

   * discard

   * i;octet

   * i;ascii-casemap

   Example:

     require ["fileinto", "reject"];

     require "fileinto";

     require "comparator-i;ascii-numeric";

   When processing arguments for `require' statement, GNU libmu_sieve
uses the following algorithm:

  1. Look up the name in a symbol table. If the name begins with
     `comparator-' it is looked up in the comparator table. If it
     begins with `test-', the test table is used instead. Otherwise the
     name is looked up in the action table.

  2. If the name is found, the search is terminated.

  3. Otherwise, transform the name. First, any `comparator-' or `test-'
     prefix is stripped. Then, any character other than alphanumeric
     characters, `.' and `,' is replaced with dash (`-'). The name thus
     obtained is used as a file name of an external loadable module.

  4. Try to load the module. The module is searched in the following
     search paths (in the order given):

       1. Mailutils module directory. By default it is
          `$prefix/lib/mailutils'.

       2. Sieve library path as given with the `-L' options in the
          command line

       3. Additional search directories specified with the
          `#searchpath' directive.

       4. The value of the environment variable `LTDL_LIBRARY_PATH'.

       5. System library search path: The system dependent library
          search path (e.g. on Linux it is set by the contents of the
          file `/etc/ld.so.conf' and the value of the environment
          variable `LD_LIBRARY_PATH').

     The value of `LTDL_LIBRARY_PATH' and `LD_LIBRARY_PATH' must be a
     colon-separated list of absolute directories, for example,
     `"/usr/lib/mypkg:/lib/foo"'.

     In any of these directories, `libmu_sieve' first attempts to find
     and load the given filename. If this fails, it tries to append the
     following suffixes to the file name:

       1. the libtool archive extension `.la'

       2. the extension used for native dynamic libraries on the host
          platform, e.g., `.so', `.sl', etc.

  5. If the module is found, `libmu_sieve' executes its initialization
     function (see below) and again looks up the name in the symbol
     table. If found, search terminates successfully.

  6. If either the module is not found, or the symbol wasn't found
     after execution of the module initialization function, search is
     terminated with an error status. `libmu_sieve' then issues the
     following diagnostic message:

          source for the required action NAME is not available


File: mailutils.info,  Node: Comparators,  Next: Tests,  Prev: Require Statement,  Up: Sieve Language

4.5 Comparators
===============

GNU libmu_sieve supports the following built-in comparators:

`i;octet'
     This comparator simply compares the two arguments octet by octet

`i;ascii-casemap'
     It treats uppercase and lowercase characters in the ASCII subset of
     UTF-8 as the same. This is the default comparator.

`i;ascii-numeric'
     Treats the two arguments as ASCII representation of decimal
     numbers and compares their numeric values. This comparator must be
     explicitly required prior to use.


File: mailutils.info,  Node: Tests,  Next: Actions,  Prev: Comparators,  Up: Sieve Language

4.6 Tests
=========

This section describes the built-in tests supported by GNU libmu_sieve.
In the discussion below the following macro-notations are used:

MATCH-TYPE
     This tag specifies the matching type to be used with the test. It
     can be one of the following:

    `:is'
          The `:is' match type describes an absolute match; if the
          contents of the first string are absolutely the same as the
          contents of the second string, they match. Only the string
          "frobnitzm" is the string "frobnitzm". The null key ":is" and
          only ":is" the null value.  This is the default match-type.

    `:contains'
          The `:contains' match type describes a substring match. If
          the value argument contains the key argument as a substring,
          the match is true.  For instance, the string "frobnitzm"
          contains "frob" and "nit", but not "fbm". The null key "" is
          contained in all values.

    `:matches'
          The `:matches' version specifies a wildcard match using the
          characters `*' and `?'. `*' matches zero or more characters,
          and `?' matches a single character. `?' and `*' may be
          escaped as `\\?' and `\\*' in strings to match against
          themselves. The first backslash escapes the second backslash;
          together, they escape the `*'.

    `:regex'
          The `:regex' version specifies a match using POSIX Extended
          Regular Expressions.

    `:value RELATION'
          The `:value' match type does a relational comparison between
          strings. Valid values for RELATION are:

         "eq"
               Equal

         "ne"
               Not Equal

         "gt"
               Greater Than

         "ge"
               Greater than or Equal

         "lt"
               Less Than

         "le"
               Less than or Equal

    `:count RELATION'
          This match type first determines the number of the specified
          entities (headers, addresses, etc.) in the message and does a
          relational comparison of the number of entities to the values
          specified in the test expression. The test expression must be
          a list of one element.

COMPARATOR
     A COMPARATOR syntax item is defined as follows:

          :comparator "COMPARATOR-NAME"
     It instructs sieve to use the given comparator with the test.  If
     COMPARATOR-NAME is not one of `i;octet', `i;ascii-casemap' it must
     be required prior to using it.  For example:

          require "comparator-i;ascii-numeric";

          if header :comparator "i;ascii-numeric" :is "X-Num" "10"
            {
              ...

ADDRESS-PART
     This syntax item is used when testing structured Internet
     addresses. It specifies which part of an address must be used in
     comparisons.  Exactly one of the following tags may be used:

    `:all'
          Use the whole address. This is the default.

    `:localpart'
          Use local part of the address.

    `:domain'
          Use domain part of the address.


   _Notice_, that MATCH-TYPE modifiers interact with comparators. Some
comparators are not suitable for matching with `:contains' or
`:matches'. If this occurs, sieve issues an appropriate error message.
For example, the statement:

     if header :matches :comparator "i;ascii-numeric"
   would result in the following error message:

     comparator `i;ascii-numeric' is incompatible with match type `:matches'
     in call to `header'

   GNU Sieve supports two kinds of tests. "Built-in tests" are defined
within the library and do not require any external files.  "External
tests" are loadable modules that can be linked in at run time using the
`require' statement (*note Require Statement::).

* Menu:

* Built-in Tests::
* External Tests::


File: mailutils.info,  Node: Built-in Tests,  Next: External Tests,  Up: Tests

4.6.1 Built-in Tests
--------------------

 -- Test: false
     This test always evaluates to "false".

 -- Test: true
     This test always evaluates to "true".

 -- Test:  address [ADDRESS-PART] [COMPARATOR] [MATCH-TYPE]
          HEADER-NAMES KEY-LIST
     Tagged arguments:

    ADDRESS-PART
          Selects the address part to compare. Default is the whole
          email address (`:all').

    COMPARATOR
          Specifies the comparator to be used instead of the default
          `i;ascii-casemap'.

    MATCH-TYPE
          Specifies the match type to be used instead of the default
          `:is'.

     Required arguments:

    HEADER-NAMES
          A list of header names.

    KEY-LIST
          A list of address values.
     The `address' test matches Internet addresses in structured headers
     that contain addresses. It returns `true' if any header contains
     any key in the specified part of the address, as modified by
     COMPARATOR and MATCH-TYPE optional arguments.

     This test returns `true' if any combination of the HEADER-NAMES
     and KEY-LIST arguments match.

     The `address' primitive never acts on the phrase part of an email
     address, nor on comments within that address. Use the `header' test
     instead. It also never acts on group names, although it does act
     on the addresses within the group construct.

     Example:

          if address :is :all "from" "tim@example.com"
            {
               discard;
            }

 -- Test:  size [:over | :under] LIMIT(number)
     The `size' test deals with the size of a message. The required
     argument LIMIT represents the size of the message in bytes. It may
     be suffixed with the following quantifiers:

    `k'
    `K'
          The number is expressed in kilobytes.

    `m'
    `M'
          The number is expressed in megabytes.

    `g'
    `G'
          The number is expressed in gigabytes.

     If the tagged argument is `:over', and the size of the message is
     greater than NUMBER, the test is true; otherwise, it is false.

     If the argument is `:under', and the size of the message is less
     than the NUMBER, the test is true; otherwise, it is false.

     Otherwise, the test is true only if the size of the message equals
     exactly NUMBER. This is a GNU extension.

     The size of a message is defined to be the number of octets from
     the initial header until the last character in the message body.

 -- Test:  envelope [ADDRESS-PART] [COMPARATOR] [MATCH-TYPE]
          ENVELOPE-PART(string-list) KEY-LIST(string-list)
     Tagged arguments:

    ADDRESS-PART
          Selects the address part to compare. Default is the whole
          email address (`:all').

    COMPARATOR
          Specifies the comparator to be used instead of the default
          `i;ascii-casemap'.

    MATCH-TYPE
          Specifies the match type to be used instead of the default
          `:is'.
     Required arguments:

    ENVELOPE-PARTS
          A list of envelope parts to operate upon.

    KEY-LIST
          A list of address values.
     The `envelope' test is true if the specified part of the SMTP
     envelope matches the specified key.

     If the envelope-part strings is (case insensitive) `from', then
     matching occurs against the FROM address used in the `SMTP MAIL'
     command.

     _Notice_, that due to the limitations imposed by SMTP envelope
     structure the use of any other values in ENVELOPE-PARTS header is
     meaningless.

 -- Test:  exists HEADER-NAMES(string-list)
     Required arguments:

    HEADER-NAMES
          List of message header names.


     The `exists' test is `true' if the headers listed in HEADER-NAMES
     argument exist within the message. All of the headers must exist
     or the test is false.

     The following example throws out mail that doesn't have a From
     header and a Date header:

          if not exists ["From","Date"]
            {
               discard;
            }

 -- Test:  header [COMPARATOR] [MATCH-TYPE] [:mime]
          HEADER-NAMES(string-list) KEY-LIST(string-list)

     Tagged arguments:

    COMPARATOR
          Specifies the comparator to be used instead of the default
          `i;ascii-casemap'.

    MATCH-TYPE
          Specifies the match type to be used instead of the default
          `:is'.

    :mime
          This tag instructs `header' to search through the mime
          headers in multipart messages as well.



     Required arguments:

    HEADER-NAMES
          A list of header names.

    KEY-LIST
          A list of header values.


     The `header' test evaluates to true if any header name matches any
     key. The type of match is specified by the optional match argument,
     which defaults to ":is" if not explicitly given.

     The test returns `true' if any combination of the HEADER-NAMES and
     KEY-LIST arguments match.

     If a header listed in HEADER-NAMES exists, it contains the null
     key (`""'). However, if the named header is not present, it does
     not contain the null key. So if a message contained the header

          X-Caffeine: C8H10N4O2


     these tests on that header evaluate as follows:

          header :is ["X-Caffeine"] [""] => false
          header :contains ["X-Caffeine"] [""] => true


File: mailutils.info,  Node: External Tests,  Prev: Built-in Tests,  Up: Tests

4.6.2 External Tests
--------------------

 -- Test:  numaddr [:over | :under] HEADER-NAMES(string-list)
          COUNT(number)


Synopsis
........

          require "test-numaddr";
          ...
          if numaddr ARGS
            {
              ...
            }

Description
...........

     This test is provided as an example of loadable extension tests.
You must use `require "test-numaddr"' statement before actually using
it.

     The `numaddr' test counts Internet addresses in structured headers
that contain addresses. It returns true if the total number of
addresses satisfies the requested relation.

     If the tagged argument is `:over' and the number of addresses is
greater than COUNT, the test is true; otherwise, it is false.

     If the tagged argument is `:under' and the number of addresses is
less than COUNT, the test is true; otherwise, it is false.

     If the tagged argument is not given, `:over' is assumed.

 -- Test:  spamd [:host TCP-HOST(string)] [:port TCP-PORT(number)]
          [:socket UNIX-SOCKET(string)] [:user NAME(string)] [:over |
          :under LIMIT(string)]
Synopsis
........

          require "test-spamd";
          ...
          if spamd ARGS
            {
              # This is spam
              ...
            }

Description
...........

     This test is an interface to SpamAssassin filter. It connects to
the `spamd' daemon using connection parameters specified by tagged
arguments `:host' and `:port' (if the daemon is listening on an INET
socket), or `:socket' (if the daemon is listening on a UNIX socket) and
returns true, if SpamAssassin qualifies the message as spam. Tagged
argument LIMIT alters the default behavior. Its value is a string
representation of a floating point number. If the tag `:over' is used,
then the test returns true if the spam score returned from SpamAssassin
is greater than LIMIT.  Otherwise, if `:under' is used, the test
returns true if the spam score is less than LIMIT. The comparison takes
into account three decimal digits.

     Tagged argument `:user' allows to select a specific user profile.
If it is not given, the user name is determined using the effective UID.

     Before returning, the `spamd' test adds the following headers to
the message:

    X-Spamd-Status
          `YES' or `NO', depending on whether the message is qualified
          as spam or ham.

    X-Spamd-Score
          Actual spam score value.

    X-Spamd-Threshold
          Spam score threshold, as configured in SpamAssassin settings.

    X-Spamd-Keywords
          Comma-separated list of keywords, describing the spam checks
          that succeeded for this message.

Example
.......

          request "test-spamd";

          if spamd :host 127.0.0.1 :port 3333
            {
               discard;
            }


 -- Test:  list [COMPARATOR] [MATCH-TYPE] [ :delim DELIMITERS(string) ]
          HEADERS(string-list) KEYS(string-list)
Synopsis
........

          require "test-list";
          if list ARGS
            {
               ...
            }

Description
...........

     The `list' test evaluates to true if any of HEADERS match any key
from KEYS. Each header is regarded as containing a list of keywords. By
default, comma is assumed as list separator. This can be overridden by
specifying the `:delim' tag, whose value is a string consisting of
valid list delimiter characters.

Example
.......

     This test can be used in conjunction with the `spamd' test
described above:

          require ["fileinto", "test-spamd", "test-list"];

          if spamd :host 127.0.0.1 :port 3333
            {
               if list :matches :delim " ,"
                       "X-Spamd-Keywords" [ "HTML_*", "FORGED_*" ]
                 {
                    fileinto "~/mail/spam";
                 }
               else
                 {
                    discard;
                 }
            }

 -- Test:  timestamp [:before | :after] HEADER(string) DATE(string)
Synopsis
........

          require "test-timestamp";

          if timestamp ARG
            {
               ...
            }

Description
...........

     The `timestamp' test compares the value of a structured date header
field (HEADER) with the given date (DATE).

     If the tagged argument is `:after' and the date from the header is
after the specified date the result is true, otherwise, if the header
date is before the given date, the result is false.

     If the tagged argument is `:before' and the date from the header is
before the specified date the result is true, otherwise, if the header
date is after the given date, the result is false.

     If no tagged argument is supplied, `:after' is assumed.

     Almost any date format is understood. *Note Date Input Formats::,
for a detailed information on date formats.

Example
.......

     The test below succeeds if the date in `X-Expire-Timestamp' header
is more than 5 days older than the current date:

          require "test-timestamp";

          if timestamp :before "X-Expire-Timestamp" "now - 5 days"
            {
               discard;
            }


File: mailutils.info,  Node: Actions,  Next: GNU Extensions,  Prev: Tests,  Up: Sieve Language

4.7 Actions
===========

There are two groups of GNU Sieve actions: "built-in actions", which
are defined within the library, and "external actions", i.e.  loadable
modules that can be linked in at run time using the `require' statement
(*note Require Statement::).

* Menu:

* Built-in Actions::
* External Actions::


File: mailutils.info,  Node: Built-in Actions,  Next: External Actions,  Up: Actions

4.7.1 Built-in Actions
----------------------

The GNU libmu_sieve supports the following built-in actions:

   * stop

   * keep

   * discard

   * fileinto

   * reject

   * redirect

   Among them the first three actions do not need to be explicitly
required by a `require' statement, while the others do.

   These actions are described in detail below.

 -- Action: stop
     The `stop' action ends all processing. If no actions have been
     executed, then the `keep' action is taken.

 -- Action: keep
     The effect of this action is to preserve the current message in the
     mailbox. This action is executed if no other action has been
     executed.

 -- Action: discard
     `Discard' silently throws away the current message. No notification
     is returned to the sender, the message is deleted from the mailbox.

     Example:
          if header :contains ["from"] ["idiot@example.edu"]
            {
              discard;
            }

 -- Action: fileinto [:permissions MODE] FOLDER
     Required arguments:

    FOLDER
          A string representing the folder name

     Tagged arguments:

    `:permissions MODE'
          Specifies the permissions to use, if the mailbox is created.

     The `fileinto' action delivers the message into the specified
     folder. If the folder is local, it is created using permissions
     `0600', for regular files, and `0700' for directories. This
     default can be changed by using the `:permissions' tag. Its
     argument is a mode specification, similar to that used by `chmod'
     shell utility. It is a list of permissions settings separated by
     commas. Each setting begins with one of the following letters:

    g
          Set permissions for the users in the file group.

    o
          Set permissions for users not in the file's group.

     This letter must be followed by either `+' or `=' and the list of
     permissions to be set. This latter list is a string containing any
     one or both of the following characters:

    r
          Grant permission to read.

    w
          Grant permission to write.

     For example, the following instruction creates the mailbox
     `~/shared' which will be world readable and writable for the group:

            fileinto :permissions "g=rw,o=r" "~/shared"

     Notice that:

       1. The `:permissions' setting are affected by the current umask
          value.

       2. Only `r' and `w' permissions can be set, since other
          permissions do not seem to be useful for mailboxes. However,
          for mailboxes that have a directory structure (such as
          maildir and MH), any settings in `g' and `o' sets imply
          setting the executable bit.

       3. Owner's permissions cannot be set. The owner always has all
          permissions on the mailbox he created.

       4. The `:permissions' settings apply only to local mailboxes.
          They are ignored for remote mailboxes.


 -- Action: reject REASON
     The optional `reject' action refuses delivery of a message by
     sending back a message delivery notification to the sender. It
     resends the message to the sender, wrapping it in a "reject" form,
     noting that it was rejected by the recipient. The required
     argument REASON is a string specifying the reason for rejecting
     the message.

     Example:

     If the message contained
          Date: Tue, 1 Apr 1997 09:06:31 -0800 (PST)
          From: coyote@desert.example.org
          To: roadrunner@acme.example.com
          Subject: I have a present for you

          I've got some great birdseed over here at my place.
          Want to buy it?


     and the user's script contained:

          if header :contains "from" "coyote@desert.example.org"
            {
              reject "I am not taking mail from you, and I don't want
                      your birdseed, either!";
            }
     then the original sender <coyote@desert.example.org> would receive
     the following notification:

          To: <coyote@desert.example.org>
          X-Authentication-Warning: roadrunner set sender using -f flag
          Content-Type: multipart/mixed; boundary=----- =_aaaaaaaaaa0
          MIME-Version: 1.0
          ----- =_aaaaaaaaaa0
          The original message was received at
          Tue, 1 Apr 1997 09:07:15 -0800 from
          coyote@desert.example.org.
          Message was refused by recipient's mail filtering program.
          Reason given was as follows:

          I am not taking mail from you, and I don't want your
          birdseed, either!

          ----- =_aaaaaaaaaa0
          Content-Type: message/delivery-status

          Reporting-UA: sieve; GNU Mailutils 0.1.3
          Arrival-Date: Tue, 1 Apr 1997 09:07:15 -0800
          Final-Recipient: RFC822; roadrunner@acme.example.com
          Action: deleted
          Disposition: automatic-action/MDN-sent-automatically;deleted
          Last-Attempt-Date: Tue, 1 Apr 1997 09:07:15 -0800

          ----- =_aaaaaaaaaa0
          Content-Type: message/rfc822

          From: coyote@desert.example.org
          To: roadrunner@acme.example.com
          Subject: I have a present for you

          I've got some great birdseed over here at my place.
          Want to buy it?
          ----- =_aaaaaaaaaa0

     If the REASON argument is rather long, the common approach is to
     use the combination of the `text:' and `#include' keywords, e.g.:

          if header :mime :matches "Content-Type"
                    [ "*application/msword;*", "*audio/x-midi*" ]
            {
              reject text:
          #include "nomsword.txt"
              .
              ;
            }


 -- Action: redirect ADDRESS
     The `redirect' action is used to send the message to another user
     at a supplied ADDRESS, as a mail forwarding feature does. This
     action makes no changes to the message body or existing headers,
     but it may add new headers. It also modifies the envelope
     recipient.

     The `redirect' command performs an MTA-style "forward" -- that is,
     what you get from a `.forward' file using `sendmail' under UNIX.
     The address on the SMTP envelope is replaced with the one on the
     `redirect' command and the message is sent back out. _Notice_,
     that it differs from the MUA-style forward, which creates a new
     message with a different sender and message ID, wrapping the old
     message in a new one.


File: mailutils.info,  Node: External Actions,  Prev: Built-in Actions,  Up: Actions

4.7.2 External Actions
----------------------

     (_The information in this node may be obsolete or otherwise
     inaccurate._ This message will disappear, once this node revised.)

GNU Mailutils is shipped with a set of external Sieve actions. These
actions are compiled as loadable modules and must be required prior to
use (*note Require Statement::).

 -- Action:  moderator [:keep] [:address ADDRESS(string)] [:source
          SIEVE-FILE(string)]
Synopsis
........

          require "moderator"
          moderator ARGS;

Description
...........

     This action is a moderator robot for Mailman-driven mail archives.
A Mailman moderation request is a MIME message consisting of the
following three parts:

     N             Content-Type                Description
     ---------------------------------------------------------------------- 
     1             text/plain                  Introduction for the human
                                               reader.
     2             message/rfc822              Original submission.
     3             message/rfc822              Mailman control message.

     Replying to part 3 (keeping the subject intact) instructs Mailman
to discard the original submission.

     Replying to part 3 while adding an `Approved:' header with the list
password in it approves the submission.

     The `moderator' action spawns an inferior Sieve machine and
filters the original submission (part 2) through it. If the inferior
machine marks the message as deleted, the action replies to the control
message, thereby causing the submission to be discarded. The `From:'
address of the reply can be modified using `:address' tag. After
discarding the message, `moderator' marks it as deleted, unless it is
given `:keep' tag.

     The argument of `:source' tag, if given, specifies the Sieve
source file to be used on the message. If `:tag' is not present,
`moderator' will create and use a copy of the existing Sieve machine.

     The action checks the message structure: it will bail out if the
message does not have exactly 3 MIME parts, or if parts 2 and 3 are not
of `message/rfc822' type. It is the responsibility of the caller to
make sure the message is actually a valid Mailman moderation request
(see the example below).

Example
.......

          if allof(header :is "Sender" "mailman-bounces@gnu.org",
                   header :is "X-List-Administrivia" "yes")
            {
               moderator :source "~/.sieve/mailman.sv";
            }

 -- Action:  pipe [:envelope] COMMAND(string)
Synopsis
........

          require "pipe";
          if pipe ARGS
            {
               ...
            }

Description
...........

     The `pipe' action sends executes a command specified by its
argument and sends the entire message to its standard input. The
COMMAND argument supplies the command line.

     The envelope of the message is included, if the `:envelope' tag is
given.

Example
.......

     The example below uses the `maidag' utility (*note maidag::) to
forward the message to user `gray' on the machine `mail.gnu.org'.

          require "pipe";

          pipe "/usr/sbin/maidag --url smtp://gray@mail.gnu.org"

 -- Action:  vacation [:days NDAYS(number)] [:subject SUBJECT(string)]
          [:aliases ADDRLIST(string-list)] [:addresses
          NOREPLY-ADDRESS(string-list)] [:reply_regex EXPR(string)]
          [:reply_prefix PREFIX(string)] REPLY-TEXT(string)
Syntax
......

          require "vacation";
          vacation ARGS;

Description
...........

     The `vacation' action returns a message with REPLY-TEXT to the
sender. It is intended to inform the sender that the recipient is not
currently reading his mail.

     If the `:subject' tag is given, its argument sets the subject of
the message. Otherwise, the subject is formed by prefixing original
subject with `Re:', or PREFIX, given with the `:reply_prefix' tag.
Before prefixing, any original prefixes matching extended regular
expression EXPR (`:reply_regex' tag) are stripped from the subject
line. If `:reply_regex' is not specified, the default regexp is `^re:
*'.

     The `:aliases' tag instructs `vacation' to handle messages for any
address in ADDRLIST in the same manner as those received for the user's
principal email.

     Before processing, `vacation' compares the sender address with its
"address exclusion list". Elements of this list are extended
case-insensitive regular expressions. If the sender address matches any
of these expressions, the message will not be replied. The default
exclusion list is:

              .*-REQUEST@.*
              .*-RELAY@.*
              .*-OWNER@.*
              ^OWNER-.*
              ^postmaster@.*
              ^UUCP@.*
              ^MAILER@.*
              ^MAILER-DAEMON@.*

     New entries can be added to this list using `:addresses' tag.

     The `:days' tag sets the "reply interval". A reply is sent to each
sender once in NDAYS days. GNU Sieve keeps track of sender addresses
and dates in a DBM file `.vacation' stored in the user's home
directory. This tag is available only if Mailutils is compiled with DBM
support.


File: mailutils.info,  Node: GNU Extensions,  Prev: Actions,  Up: Sieve Language

4.8 GNU Extensions
==================

This section summarizes the GNU extensions to the sieve language

  1. Multiline strings syntax

     GNU libmu_sieve understands the following multiline string syntax:

          text:[-][DELIMITER]
          ....
          DELIMITER

     The meaning of optional flags is the same as in shell "here
     document" construct: the dash strips all leading tab characters
     from the string body, thus allowing it to be indented in a natural
     fashion; DELIMITER introduces the new end-of-text delimiter
     instead of the default dot. If DELIMITER starts with a backslash,
     no preprocessing will be performed within a string.

  2. Handling of the `require' statement.

        * According to the RFC an error must occur if a `require'
          appears after a command other than `require'. The GNU sieve
          library allows interspersing the `require' and other
          statements. The only requirement is that `require' must occur
          before a statement that is using the required capability
          (*note Require Statement::).

        * Prefixing the required capability with "test" requires the use
          of an extension test.

  3. `header' test

     The `header' takes an optional argument `:mime', meaning to scan
     the headers from each part of a multipart message.

  4. `size' test

     The `size' test allows to omit the optional argument
     (:over|:under). In this case exact equality is assumed.

  5. `envelope' test

     The only value that can be meaningfully used as the first required
     argument of an `envelope' test is `from'. This limitation may
     disappear from the subsequent releases.

  6. `fileinto' action

     The `fileinto' action allows to specify permissions on the mailbox,
     in case it is created (*note fileinto::).

  7. Match type optional argument.

     Along with the usual `:is', `:matches' and `contains' matching
     type, GNU sieve library understands `:regex' type. This matching
     type toggles POSIX Extended Regular Expression matching.


File: mailutils.info,  Node: Reporting Bugs,  Next: News,  Prev: Sieve Language,  Up: Top

5 Reporting Bugs
****************

Email bug reports to <bug-mailutils@gnu.org>.

   As the purpose of bug reporting is to improve software, please be
sure to include maximum information when reporting a bug. The
information needed is:

   * Version of the package you are using.

   * Compilation options used when configuring the package.

   * Conditions under which the bug appears.

   The archives of bug-mailutils mailing list are available from
`http://mail.gnu.org/mailman/listinfo/bug-mailutils'.


File: mailutils.info,  Node: News,  Next: Acknowledgement,  Prev: Reporting Bugs,  Up: Top

6 Getting News About GNU Mailutils
**********************************

The two places to look for any news regarding GNU Mailutils are the
Mailutils homepage at `http://www.gnu.org/software/mailutils', and the
project page at `http://savannah.gnu.org/projects/mailutils'.

   The updated versions of this manual are available online from
`http://www.gnu.org/software/mailutils/manual'.


File: mailutils.info,  Node: Acknowledgement,  Next: References,  Prev: News,  Up: Top

7 Acknowledgement
*****************

In no particular order,

   * Jakob Kaivo <jkaivo@ndn.net>,

   * Jeff Bailey <jbailey@gnu.org>,

   * Sean Perry <shaleh@debian.org>,

   * Thomas Fletcher <thomasf@qnx.com>,

   * Dave Inglis <dinglis@qnx.com>,

   * Brian Edmond <briane@qnx.com>,

   * Sam Roberts <sroberts@uniserve.com>,

   * Sergey Poznyakoff <gray@Mirddin.farlep.net>,

   * Franc,ois Pinard  <pinard@IRO.UMontreal.CA>.

   * Jordi Mallach <jordi@sindominio.net>

   * Wojciech Polak <polak@gnu.org>


File: mailutils.info,  Node: References,  Next: Date Input Formats,  Prev: Acknowledgement,  Up: Top

Appendix A References
*********************

   * SMTP

        - `RFC 2821: Simple Mail Transfer Protocol'

        - `RFC 2368: The mailto URL scheme'

        - `RFC 2487: SMTP Service Extension for Secure SMTP over TLS'

   * POP3

        - `RFC 1939: Post Office Protocol - Version 3'

        - `RFC 1734: POP3 AUTHentication command'

        - `RFC 1957: Some Observations on Implementations of the Post
          Office Protocol (POP3)'

        - `RFC 2449: POP3 Extension Mechanism'

        - `RFC 2384: POP URL Scheme'

        - `RFC 2595: Using TLS with IMAP, POP3 and ACAP'

   * IMAP4

        - `RFC 2060: INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1'

        - `RFC 2088: IMAP4 non-synchronizing literals'

        - `RFC 2193: IMAP4 Mailbox Referrals'

        - `RFC 2221: IMAP4 Login Referrals'

        - `RFC 2342: IMAP4 Namespace'

        - `RFC 2192: IMAP URL Scheme'

        - `RFC 1731: IMAP4 Authentication Mechanisms'

        - `RFC 2245: Anonymous SASL Mechanism'

        - `RFC 2595: Using TLS with IMAP, POP3 and ACAP'

   * message formats

        - `RFC 2822: Internet Message Format'

        - `RFC 2045: Multipurpose Internet Mail Extensions (MIME) Part
          One: Format of Internet Message Bodies'

        - `RFC 2046: Multipurpose Internet Mail Extensions (MIME) Part
          Two: Media Types'

        - `RFC 2047: Multipurpose Internet Mail Extensions (MIME) Part
          Three: Message Header Extensions for Non-ASCII Text'

        - `RFC 2049: Multipurpose Internet Mail Extensions (MIME) Part
          Five: Conformance Criteria and Examples'

        - `RFC 2111: Content-ID and Message-ID Uniform Resource
          Locators'

   * miscellaneous related topics

        - `RFC 1738: Uniform Resource Locators (URL)'

        - `RFC 2298: An Extensible Message Format for Message
          Disposition Notifications'

        - `RFC 3028: Sieve: A Mail Filtering Language'

        - `RFC 3431: Sieve Extension: Relational Tests'

        - `Internet Email Protocols: A Developer's Guide, by Kevin
          Johnson'


File: mailutils.info,  Node: Date Input Formats,  Next: Usage Vars,  Prev: References,  Up: Top

Appendix B Date Input Formats
*****************************

First, a quote:

     Our units of temporal measurement, from seconds on up to months,
     are so complicated, asymmetrical and disjunctive so as to make
     coherent mental reckoning in time all but impossible. Indeed, had
     some tyrannical god contrived to enslave our minds to time, to
     make it all but impossible for us to escape subjection to sodden
     routines and unpleasant surprises, he could hardly have done
     better than handing down our present system.  It is like a set of
     trapezoidal building blocks, with no vertical or horizontal
     surfaces, like a language in which the simplest thought demands
     ornate constructions, useless particles and lengthy
     circumlocutions. Unlike the more successful patterns of language
     and science, which enable us to face experience boldly or at least
     level-headedly, our system of temporal calculation silently and
     persistently encourages our terror of time.

     ...  It is as though architects had to measure length in feet,
     width in meters and height in ells; as though basic instruction
     manuals demanded a knowledge of five different languages. It is no
     wonder then that we often look into our own immediate past or
     future, last Tuesday or a week from Sunday, with feelings of
     helpless confusion. ...

     -- Robert Grudin, `Time and the Art of Living'.

   This section describes the textual date representations that GNU
programs accept. These are the strings you, as a user, can supply as
arguments to the various programs. The C interface (via the `get_date'
function) is not described here.

* Menu:

* General date syntax::            Common rules.
* Calendar date items::            19 Dec 1994.
* Time of day items::              9:20pm.
* Time zone items::                EST, PDT, GMT.
* Day of week items::              Monday and others.
* Relative items in date strings:: next tuesday, 2 years ago.
* Pure numbers in date strings::   19931219, 1440.
* Seconds since the Epoch::        @1078100502.
* Specifying time zone rules::     TZ="America/New_York", TZ="UTC0".
* Authors of get_date::            Bellovin, Eggert, Salz, Berets, et al.


File: mailutils.info,  Node: General date syntax,  Next: Calendar date items,  Up: Date Input Formats

B.1 General date syntax
=======================

A "date" is a string, possibly empty, containing many items separated
by whitespace. The whitespace may be omitted when no ambiguity arises.
The empty string means the beginning of today (i.e., midnight). Order
of the items is immaterial. A date string may contain many flavors of
items:

   * calendar date items

   * time of day items

   * time zone items

   * day of the week items

   * relative items

   * pure numbers.

We describe each of these item types in turn, below.

   A few ordinal numbers may be written out in words in some contexts.
This is most useful for specifying day of the week items or relative
items (see below). Among the most commonly used ordinal numbers, the
word `last' stands for -1, `this' stands for 0, and `first' and `next'
both stand for 1. Because the word `second' stands for the unit of time
there is no way to write the ordinal number 2, but for convenience
`third' stands for 3, `fourth' for 4, `fifth' for 5, `sixth' for 6,
`seventh' for 7, `eighth' for 8, `ninth' for 9, `tenth' for 10,
`eleventh' for 11 and `twelfth' for 12.

   When a month is written this way, it is still considered to be
written numerically, instead of being "spelled in full"; this changes
the allowed strings.

   In the current implementation, only English is supported for words
and abbreviations like `AM', `DST', `EST', `first', `January',
`Sunday', `tomorrow', and `year'.

   The output of the `date' command is not always acceptable as a date
string, not only because of the language problem, but also because
there is no standard meaning for time zone items like `IST'. When using
`date' to generate a date string intended to be parsed later, specify a
date format that is independent of language and that does not use time
zone items other than `UTC' and `Z'. Here are some ways to do this:

     $ LC_ALL=C TZ=UTC0 date
     Mon Mar  1 00:21:42 UTC 2004
     $ TZ=UTC0 date +'%Y-%m-%d %H:%M:%SZ'
     2004-03-01 00:21:42Z
     $ date --iso-8601=ns | tr T ' '  # --iso-8601 is a GNU extension.
     2004-02-29 16:21:42,692722128-0800
     $ date --rfc-2822  # a GNU extension
     Sun, 29 Feb 2004 16:21:42 -0800
     $ date +'%Y-%m-%d %H:%M:%S %z'  # %z is a GNU extension.
     2004-02-29 16:21:42 -0800
     $ date +'@%s.%N'  # %s and %N are GNU extensions.
     @1078100502.692722128

   Alphabetic case is completely ignored in dates. Comments may be
introduced between round parentheses, as long as included parentheses
are properly nested. Hyphens not followed by a digit are currently
ignored. Leading zeros on numbers are ignored.

   Invalid dates like `2005-02-29' or times like `24:00' are rejected.
In the typical case of a host that does not support leap seconds, a
time like `23:59:60' is rejected even if it corresponds to a valid leap
second.


File: mailutils.info,  Node: Calendar date items,  Next: Time of day items,  Prev: General date syntax,  Up: Date Input Formats

B.2 Calendar date items
=======================

A "calendar date item" specifies a day of the year. It is specified
differently, depending on whether the month is specified numerically or
literally. All these strings specify the same calendar date:

     1972-09-24     # ISO 8601.
     72-9-24        # Assume 19xx for 69 through 99,
                    # 20xx for 00 through 68.
     72-09-24       # Leading zeros are ignored.
     9/24/72        # Common U.S. writing.
     24 September 1972
     24 Sept 72     # September has a special abbreviation.
     24 Sep 72      # Three-letter abbreviations always allowed.
     Sep 24, 1972
     24-sep-72
     24sep72

   The year can also be omitted. In this case, the last specified year
is used, or the current year if none. For example:

     9/24
     sep 24

   Here are the rules.

   For numeric months, the ISO 8601 format `YEAR-MONTH-DAY' is allowed,
where YEAR is any positive number, MONTH is a number between 01 and 12,
and DAY is a number between 01 and 31. A leading zero must be present
if a number is less than ten. If YEAR is 68 or smaller, then 2000 is
added to it; otherwise, if YEAR is less than 100, then 1900 is added to
it. The construct `MONTH/DAY/YEAR', popular in the United States, is
accepted. Also `MONTH/DAY', omitting the year.

   Literal months may be spelled out in full: `January', `February',
`March', `April', `May', `June', `July', `August', `September',
`October', `November' or `December'. Literal months may be abbreviated
to their first three letters, possibly followed by an abbreviating dot.
It is also permitted to write `Sept' instead of `September'.

   When months are written literally, the calendar date may be given as
any of the following:

     DAY MONTH YEAR
     DAY MONTH
     MONTH DAY YEAR
     DAY-MONTH-YEAR

   Or, omitting the year:

     MONTH DAY


File: mailutils.info,  Node: Time of day items,  Next: Time zone items,  Prev: Calendar date items,  Up: Date Input Formats

B.3 Time of day items
=====================

A "time of day item" in date strings specifies the time on a given day.
Here are some examples, all of which represent the same time:

     20:02:00.000000
     20:02
     8:02pm
     20:02-0500      # In EST (U.S. Eastern Standard Time).

   More generally, the time of day may be given as
`HOUR:MINUTE:SECOND', where HOUR is a number between 0 and 23, MINUTE
is a number between 0 and 59, and SECOND is a number between 0 and 59
possibly followed by `.' or `,' and a fraction containing one or more
digits.  Alternatively, `:SECOND' can be omitted, in which case it is
taken to be zero. On the rare hosts that support leap seconds, SECOND
may be 60.

   If the time is followed by `am' or `pm' (or `a.m.' or `p.m.'), HOUR
is restricted to run from 1 to 12, and `:MINUTE' may be omitted (taken
to be zero). `am' indicates the first half of the day, `pm' indicates
the second half of the day. In this notation, 12 is the predecessor of
1: midnight is `12am' while noon is `12pm'.  (This is the zero-oriented
interpretation of `12am' and `12pm', as opposed to the old tradition
derived from Latin which uses `12m' for noon and `12pm' for midnight.)

   The time may alternatively be followed by a time zone correction,
expressed as `SHHMM', where S is `+' or `-', HH is a number of zone
hours and MM is a number of zone minutes.  The zone minutes term, MM,
may be omitted, in which case the one- or two-digit correction is
interpreted as a number of hours.  You can also separate HH from MM
with a colon.  When a time zone correction is given this way, it forces
interpretation of the time relative to Coordinated Universal Time
(UTC), overriding any previous specification for the time zone or the
local time zone. For example, `+0530' and `+05:30' both stand for the
time zone 5.5 hours ahead of UTC (e.g., India).  This is the best way to
specify a time zone correction by fractional parts of an hour.  The
maximum zone correction is 24 hours.

   Either `am'/`pm' or a time zone correction may be specified, but not
both.


File: mailutils.info,  Node: Time zone items,  Next: Day of week items,  Prev: Time of day items,  Up: Date Input Formats

B.4 Time zone items
===================

A "time zone item" specifies an international time zone, indicated by a
small set of letters, e.g., `UTC' or `Z' for Coordinated Universal
Time. Any included periods are ignored. By following a
non-daylight-saving time zone by the string `DST' in a separate word
(that is, separated by some white space), the corresponding daylight
saving time zone may be specified.  Alternatively, a
non-daylight-saving time zone can be followed by a time zone
correction, to add the two values. This is normally done only for
`UTC'; for example, `UTC+05:30' is equivalent to `+05:30'.

   Time zone items other than `UTC' and `Z' are obsolescent and are not
recommended, because they are ambiguous; for example, `EST' has a
different meaning in Australia than in the United States. Instead, it's
better to use unambiguous numeric time zone corrections like `-0500', as
described in the previous section.

   If neither a time zone item nor a time zone correction is supplied,
time stamps are interpreted using the rules of the default time zone
(*note Specifying time zone rules::).


File: mailutils.info,  Node: Day of week items,  Next: Relative items in date strings,  Prev: Time zone items,  Up: Date Input Formats

B.5 Day of week items
=====================

The explicit mention of a day of the week will forward the date (only
if necessary) to reach that day of the week in the future.

   Days of the week may be spelled out in full: `Sunday', `Monday',
`Tuesday', `Wednesday', `Thursday', `Friday' or `Saturday'. Days may be
abbreviated to their first three letters, optionally followed by a
period. The special abbreviations `Tues' for `Tuesday', `Wednes' for
`Wednesday' and `Thur' or `Thurs' for `Thursday' are also allowed.

   A number may precede a day of the week item to move forward
supplementary weeks. It is best used in expression like `third monday'.
In this context, `last DAY' or `next DAY' is also acceptable; they move
one week before or after the day that DAY by itself would represent.

   A comma following a day of the week item is ignored.


File: mailutils.info,  Node: Relative items in date strings,  Next: Pure numbers in date strings,  Prev: Day of week items,  Up: Date Input Formats

B.6 Relative items in date strings
==================================

"Relative items" adjust a date (or the current date if none) forward or
backward. The effects of relative items accumulate. Here are some
examples:

     1 year
     1 year ago
     3 years
     2 days

   The unit of time displacement may be selected by the string `year'
or `month' for moving by whole years or months. These are fuzzy units,
as years and months are not all of equal duration. More precise units
are `fortnight' which is worth 14 days, `week' worth 7 days, `day'
worth 24 hours, `hour' worth 60 minutes, `minute' or `min' worth 60
seconds, and `second' or `sec' worth one second. An `s' suffix on these
units is accepted and ignored.

   The unit of time may be preceded by a multiplier, given as an
optionally signed number. Unsigned numbers are taken as positively
signed. No number at all implies 1 for a multiplier. Following a
relative item by the string `ago' is equivalent to preceding the unit
by a multiplier with value -1.

   The string `tomorrow' is worth one day in the future (equivalent to
`day'), the string `yesterday' is worth one day in the past (equivalent
to `day ago').

   The strings `now' or `today' are relative items corresponding to
zero-valued time displacement, these strings come from the fact a
zero-valued time displacement represents the current time when not
otherwise changed by previous items. They may be used to stress other
items, like in `12:00 today'. The string `this' also has the meaning of
a zero-valued time displacement, but is preferred in date strings like
`this thursday'.

   When a relative item causes the resulting date to cross a boundary
where the clocks were adjusted, typically for daylight saving time, the
resulting date and time are adjusted accordingly.

   The fuzz in units can cause problems with relative items. For
example, `2003-07-31 -1 month' might evaluate to 2003-07-01, because
2003-06-31 is an invalid date. To determine the previous month more
reliably, you can ask for the month before the 15th of the current
month. For example:

     $ date -R
     Thu, 31 Jul 2003 13:02:39 -0700
     $ date --date='-1 month' +'Last month was %B?'
     Last month was July?
     $ date --date="$(date +%Y-%m-15) -1 month" +'Last month was %B!'
     Last month was June!

   Also, take care when manipulating dates around clock changes such as
daylight saving leaps. In a few cases these have added or subtracted as
much as 24 hours from the clock, so it is often wise to adopt universal
time by setting the `TZ' environment variable to `UTC0' before
embarking on calendrical calculations.


File: mailutils.info,  Node: Pure numbers in date strings,  Next: Seconds since the Epoch,  Prev: Relative items in date strings,  Up: Date Input Formats

B.7 Pure numbers in date strings
================================

The precise interpretation of a pure decimal number depends on the
context in the date string.

   If the decimal number is of the form YYYYMMDD and no other calendar
date item (*note Calendar date items::) appears before it in the date
string, then YYYY is read as the year, MM as the month number and DD as
the day of the month, for the specified calendar date.

   If the decimal number is of the form HHMM and no other time of day
item appears before it in the date string, then HH is read as the hour
of the day and MM as the minute of the hour, for the specified time of
day. MM can also be omitted.

   If both a calendar date and a time of day appear to the left of a
number in the date string, but no relative item, then the number
overrides the year.


File: mailutils.info,  Node: Seconds since the Epoch,  Next: Specifying time zone rules,  Prev: Pure numbers in date strings,  Up: Date Input Formats

B.8 Seconds since the Epoch
===========================

If you precede a number with `@', it represents an internal time stamp
as a count of seconds. The number can contain an internal decimal point
(either `.' or `,'); any excess precision not supported by the internal
representation is truncated toward minus infinity. Such a number cannot
be combined with any other date item, as it specifies a complete time
stamp.

   Internally, computer times are represented as a count of seconds
since an epoch--a well-defined point of time. On GNU and POSIX systems,
the epoch is 1970-01-01 00:00:00 UTC, so `@0' represents this time,
`@1' represents 1970-01-01 00:00:01 UTC, and so forth. GNU and most
other POSIX-compliant systems support such times as an extension to
POSIX, using negative counts, so that `@-1' represents 1969-12-31
23:59:59 UTC.

   Traditional Unix systems count seconds with 32-bit two's-complement
integers and can represent times from 1901-12-13 20:45:52 through
2038-01-19 03:14:07 UTC. More modern systems use 64-bit counts of
seconds with nanosecond subcounts, and can represent all the times in
the known lifetime of the universe to a resolution of 1 nanosecond.

   On most hosts, these counts ignore the presence of leap seconds.
For example, on most hosts `@915148799' represents 1998-12-31 23:59:59
UTC, `@915148800' represents 1999-01-01 00:00:00 UTC, and there is no
way to represent the intervening leap second 1998-12-31 23:59:60 UTC.


File: mailutils.info,  Node: Specifying time zone rules,  Next: Authors of get_date,  Prev: Seconds since the Epoch,  Up: Date Input Formats

B.9 Specifying time zone rules
==============================

Normally, dates are interpreted using the rules of the current time
zone, which in turn are specified by the `TZ' environment variable, or
by a system default if `TZ' is not set. To specify a different set of
default time zone rules that apply just to one date, start the date
with a string of the form `TZ="RULE"'. The two quote characters (`"')
must be present in the date, and any quotes or backslashes within RULE
must be escaped by a backslash.

   For example, with the GNU `date' command you can answer the question
"What time is it in New York when a Paris clock shows 6:30am on October
31, 2004?" by using a date beginning with `TZ="Europe/Paris"' as shown
in the following shell transcript:

     $ export TZ="America/New_York"
     $ date --date='TZ="Europe/Paris" 2004-10-31 06:30'
     Sun Oct 31 01:30:00 EDT 2004

   In this example, the `--date' operand begins with its own `TZ'
setting, so the rest of that operand is processed according to
`Europe/Paris' rules, treating the string `2004-10-31 06:30' as if it
were in Paris. However, since the output of the `date' command is
processed according to the overall time zone rules, it uses New York
time.  (Paris was normally six hours ahead of New York in 2004, but
this example refers to a brief Halloween period when the gap was five
hours.)

   A `TZ' value is a rule that typically names a location in the `tz'
database (http://www.twinsun.com/tz/tz-link.htm).  A recent catalog of
location names appears in the TWiki Date and Time Gateway
(http://twiki.org/cgi-bin/xtra/tzdate). A few non-GNU hosts require a
colon before a location name in a `TZ' setting, e.g.,
`TZ=":America/New_York"'.

   The `tz' database includes a wide variety of locations ranging from
`Arctic/Longyearbyen' to `Antarctica/South_Pole', but if you are at sea
and have your own private time zone, or if you are using a non-GNU host
that does not support the `tz' database, you may need to use a POSIX
rule instead. Simple POSIX rules like `UTC0' specify a time zone without
daylight saving time; other rules can specify simple daylight saving
regimes. *Note Specifying the Time Zone with `TZ': (libc)TZ Variable.


File: mailutils.info,  Node: Authors of get_date,  Prev: Specifying time zone rules,  Up: Date Input Formats

B.10 Authors of `get_date'
==========================

`get_date' was originally implemented by Steven M. Bellovin
(<smb@research.att.com>) while at the University of North Carolina at
Chapel Hill. The code was later tweaked by a couple of people on
Usenet, then completely overhauled by Rich $alz (<rsalz@bbn.com>) and
Jim Berets (<jberets@bbn.com>) in August, 1990. Various revisions for
the GNU system were made by David MacKenzie, Jim Meyering, Paul Eggert
and others.

   This chapter was originally produced by Franc,ois Pinard
(<pinard@iro.umontreal.ca>) from the `getdate.y' source code, and then
edited by K. Berry (<kb@cs.umb.edu>).


File: mailutils.info,  Node: Usage Vars,  Next: GNU FDL,  Prev: Date Input Formats,  Up: Top

Appendix C Configuring Help Summary
***********************************

Running `PROG --help' displays the short usage summary for PROG utility
(*note Common Options::). This summary is organized by "groups" of
semantically close options. The options within each group are printed
in the following order: a short option, eventually followed by a list
of corresponding long option names, followed by a short description of
the option. For example, here is an excerpt from the actual `sieve
--help' output:

  -c, --compile-only         Compile script and exit
  -d, --debug[=FLAGS]        Debug flags
  -e, --email=ADDRESS        Override user email address

   The exact visual representation of the help output is configurable
via `ARGP_HELP_FMT' environment variable. The value of this variable is
a comma-separated list of "format variable" assignments. There are two
kinds of format variables. An "offset variable" keeps the offset of
some part of help output text from the leftmost column on the screen. A
"boolean" variable is a flag that toggles some output feature on or
off. Depending on the type of the corresponding variable, there are two
kinds of assignments:

Offset assignment
     The assignment to an offset variable has the following syntax:

          VARIABLE=VALUE

     where VARIABLE is the variable name, and VALUE is a numeric value
     to be assigned to the variable.

Boolean assignment
     To assign `true' value to a variable, simply put this variable
     name. To assign `false' value, prefix the variable name with
     `no-'. For example:

          # Assign `true' value:
          dup-args
          # Assign `false' value:
          no-dup-args

   Following variables are declared:

 -- Help Output: boolean dup-args
     If true, arguments for an option are shown with both short and long
     options, even when a given option has both forms, for example:

            -e ADDRESS, --email=ADDRESS        Override user email address

     If false, then if an option has both short and long forms, the
     argument is only shown with the long one, for example:

            -e, --email=ADDRESS        Override user email address

     and a message indicating that the argument is applicable to both
     forms is printed below the options. This message can be disabled
     using `dup-args-note' (see below).

     The default is false.

 -- Help Output: boolean dup-args-note
     If this variable is true, which is the default, the following
     notice is displayed at the end of the help output:

          Mandatory or optional arguments to long options are also
          mandatory or optional for any corresponding short options.

     Setting `no-dup-args-note' inhibits this message. Normally, only
     one of variables `dup-args' or `dup-args-note' should be set.

 -- Help Output: offset short-opt-col
     Column in which short options start. Default is 2.

          $ sieve --help|grep ADDRESS
            -e, --email=ADDRESS        Override user email address
          $ ARGP_HELP_FMT=short-opt-col=6 sieve --help|grep ARCHIVE
                -e, --email=ADDRESS        Override user email address

 -- Help Output: offset long-opt-col
     Column in which long options start. Default is 6. For example:

          $ sieve --help|grep ADDRESS
            -e, --email=ADDRESS        Override user email address
          $ ARGP_HELP_FMT=long-opt-col=16 sieve --help|grep ADDRESS
            -e,           --email=ADDRESS        Override user email address

 -- Help Output: offset doc-opt-col
     Column in which "doc options" start. A doc option isn't actually
     an option, but rather an arbitrary piece of documentation that is
     displayed in much the same manner as the options. For example, in
     the output of `folder --help':

     Usage: folder [OPTION...] [action] [msg]
     GNU MH folder
       Actions are:
           --list                 List the contents of the folder stack
       ...

     the string `Actions are:' is a doc option. Thus, if you set
     `ARGP_HELP_FMT=doc-opt-col=6' the above part of the help output
     will look as follows:

     Usage: folder [OPTION...] [action] [msg]
     GNU MH folder
           Actions are:
           --list                 List the contents of the folder stack
       ...

 -- Help Output: offset opt-doc-col
     Column in which option description starts. Default is 29.

          $ sieve --help|grep ADDRESS
            -e, --email=ADDRESS        Override user email address
          $ ARGP_HELP_FMT=opt-doc-col=19 sieve --help|grep ADDRESS
            -e, --email=ADDRESS   Override user email address
          $ ARGP_HELP_FMT=opt-doc-col=9 sieve --help|grep -i ADDRESS
            -e, --email=ADDRESS
                   Override user email address

     Notice, that the description starts on a separate line if
     `opt-doc-col' value is too small.

 -- Help Output: offset header-col
     Column in which "group headers" are printed. A group header is a
     descriptive text preceding an option group. For example, in the
     following text:

      Sieve options
       -I, --includedir=DIR       Append directory DIR to the
                                  list of include directories
      the text `Sieve options' is a group header.

     The default value is 1.

 -- Help Output: offset usage-indent
     Indentation of wrapped usage lines. Affects `--usage' output.
     Default is 12.

 -- Help Output: offset rmargin
     Right margin of the text output. Used for wrapping.


File: mailutils.info,  Node: GNU FDL,  Next: Function Index,  Prev: Usage Vars,  Up: Top

Appendix D GNU Free Documentation License
*****************************************

                      Version 1.2, November 2002

     Copyright (C) 2000, 2001, 2002, 2010 Free Software Foundation,
     Inc.
     51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense. It
     complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does. But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book. We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License. Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein. The
     "Document", below, refers to any such manual or work. Any member
     of the public is a licensee, and is addressed as "you". You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License. If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections. If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License. A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters. A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text. A copy
     that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification. Examples of transparent image formats include
     PNG, XCF and JPG. Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page. For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document. These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License. You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute. However,
     you may accept compensation in exchange for copies. If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover. Both covers must also clearly
     and legibly identify you as the publisher of these copies. The
     front cover must present the full title with all words of the
     title equally prominent and visible. You may add other material on
     the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it. In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document). You may use the same
          title as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page. If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on. These may be placed in the
          "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles. Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements". Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant. To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version. Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity. If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy. If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications". You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections. You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers. In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License. Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License. However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time. Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns. See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation. If the
     Document does not specify a version number of this License, you
     may choose any version ever published (not as a draft) by the Free
     Software Foundation.

D.1 ADDENDUM: How to use this License for your documents
========================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: mailutils.info,  Node: Function Index,  Next: Variable Index,  Prev: GNU FDL,  Up: Top

Function Index
**************

This is an alphabetical list of all Mailutils functions.

 [index ]
* Menu:

* acl:                                   Server Statement.    (line  64)
* address:                               Built-in Tests.      (line  14)
* ago in date strings:                   Relative items in date strings.
                                                              (line  23)
* allow:                                 ACL Statement.       (line  57)
* allow-biffrc:                          General Settings.    (line  12)
* allow-syslog-priority:                 Tcp-wrappers Statement.
                                                              (line  62)
* allow-table:                           Tcp-wrappers Statement.
                                                              (line  56)
* am in date strings:                    Time of day items.   (line  22)
* auth:                                  Radius Statement.    (line  85)
* authentication:                        Auth Statement.      (line  97)
* authorization:                         Auth Statement.      (line  63)
* bulletin-db:                           Conf-pop3d.          (line  53)
* bulletin-source:                       Conf-pop3d.          (line  49)
* clear-include-path:                    Sieve Configuration. (line  35)
* clear-library-path:                    Sieve Configuration. (line  30)
* concat:                                Format String Diffs. (line  89)
* config-file, --config-file option, described: configuration.
                                                              (line  37)
* config-file, --config-file option, introduced: Common Options.
                                                              (line  71)
* config-help, --config-help option, described: configuration.
                                                              (line  82)
* config-help, --config-help option, introduced: Common Options.
                                                              (line  74)
* config-lint, --config-lint option, described: configuration.
                                                              (line  75)
* config-lint, --config-lint option, introduced: Common Options.
                                                              (line  77)
* config-verbose, --config-verbose option, described: configuration.
                                                              (line  46)
* config-verbose, --config-verbose option, introduced: Common Options.
                                                              (line  80)
* create-home-dir:                       Conf-imap4d.         (line  46)
* daemon:                                Tcp-wrappers Statement.
                                                              (line  51)
* day in date strings:                   Relative items in date strings.
                                                              (line  15)
* db:                                    SQL Statement.       (line  77)
* debug <1>:                             Mimeview Config.     (line  14)
* debug <2>:                             Conf-maidag.         (line  50)
* debug:                                 Sieve Configuration. (line  62)
* decode:                                Format String Diffs. (line   7)
* delete-expired:                        Conf-pop3d.          (line  34)
* deny:                                  ACL Statement.       (line  60)
* deny-syslog-priority:                  Tcp-wrappers Statement.
                                                              (line  65)
* deny-table:                            Tcp-wrappers Statement.
                                                              (line  59)
* directory:                             Radius Statement.    (line  34)
* discard:                               Built-in Actions.    (line  35)
* emacs:                                 Movemail Configuration.
                                                              (line  16)
* email:                                 Sieve Configuration. (line  73)
* enable:                                Tcp-wrappers Statement.
                                                              (line  48)
* envelope:                              Built-in Tests.      (line  86)
* ex-multiple-delivery-success:          Conf-maidag.         (line  27)
* ex-quota-tempfail:                     Conf-maidag.         (line  31)
* exec:                                  ACL Statement.       (line 121)
* exists:                                Built-in Tests.      (line 118)
* expire:                                Conf-pop3d.          (line  30)
* expire-timeout:                        Locking Statement.   (line  62)
* external-locker:                       Locking Statement.   (line  66)
* facility:                              Logging Statement.   (line  26)
* false:                                 Built-in Tests.      (line   7)
* fileinto:                              Built-in Actions.    (line  45)
* first in date strings:                 General date syntax. (line  26)
* flags:                                 Locking Statement.   (line  32)
* folder <1>:                            Conf-readmsg.        (line  24)
* folder:                                Mailbox Statement.   (line 178)
* foreground:                            General Server Configuration.
                                                              (line  56)
* form-feeds:                            Conf-readmsg.        (line  21)
* fortnight in date strings:             Relative items in date strings.
                                                              (line  15)
* forward-file:                          Conf-maidag.         (line  68)
* forward-file-checks:                   Conf-maidag.         (line  71)
* get_date:                              Date Input Formats.  (line   6)
* getpwnam:                              Radius Statement.    (line  95)
* getpwuid:                              Radius Statement.    (line 119)
* group:                                 Conf-maidag.         (line  78)
* guile-filter:                          Conf-maidag.         (line  46)
* header <1>:                            Built-in Tests.      (line 138)
* header:                                Conf-readmsg.        (line   9)
* help, --help option, described:        Common Options.      (line   8)
* home-dir-mode:                         Conf-imap4d.         (line  50)
* host:                                  SQL Statement.       (line  66)
* hour in date strings:                  Relative items in date strings.
                                                              (line  15)
* id-fields:                             Conf-imap4d.         (line 110)
* ident-encrypt-only:                    Conf-imap4d.         (line 107)
* ident-keyfile:                         Conf-imap4d.         (line 103)
* ifexec:                                ACL Statement.       (line  63)
* ignore-erros:                          Movemail Configuration.
                                                              (line  20)
* in_reply_to:                           Format String Diffs. (line  98)
* include-path:                          Sieve Configuration. (line  46)
* int:                                   Stream.              (line  93)
* interface:                             SQL Statement.       (line  49)
* isreply:                               Format String Diffs. (line  54)
* keep:                                  Built-in Actions.    (line  30)
* keep-going:                            Sieve Configuration. (line  52)
* last DAY:                              Day of week items.   (line  15)
* last in date strings:                  General date syntax. (line  26)
* level:                                 Debug Statement.     (line  92)
* library-path:                          Sieve Configuration. (line  40)
* line-info <1>:                         Sieve Configuration. (line  69)
* line-info:                             Debug Statement.     (line 137)
* list:                                  External Tests.      (line 101)
* listen:                                Conf-maidag.         (line  81)
* lmtp:                                  Conf-maidag.         (line  75)
* log:                                   ACL Statement.       (line  72)
* login-delay:                           Conf-pop3d.          (line  41)
* login-disabled:                        Conf-imap4d.         (line  43)
* mail-spool:                            Mailbox Statement.   (line  30)
* mailbox-ownership:                     Movemail Configuration.
                                                              (line  72)
* mailbox-pattern:                       Mailbox Statement.   (line  40)
* mailbox-type:                          Mailbox Statement.   (line 172)
* max-children:                          General Server Configuration.
                                                              (line  61)
* max-lines:                             General Settings.    (line   9)
* max-requests:                          Security Settings.   (line  10)
* mbox-url:                              Sieve Configuration. (line  56)
* message-id-header:                     Conf-maidag.         (line  42)
* metamail:                              Mimeview Config.     (line  21)
* midnight in date strings:              Time of day items.   (line  22)
* mimetypes:                             Mimeview Config.     (line  18)
* minute in date strings:                Relative items in date strings.
                                                              (line  15)
* mode:                                  General Server Configuration.
                                                              (line  28)
* moderator:                             External Actions.    (line  15)
* month in date strings:                 Relative items in date strings.
                                                              (line  15)
* mu-address-get-comments:               Address Functions.   (line  11)
* mu-address-get-count:                  Address Functions.   (line  27)
* mu-address-get-domain:                 Address Functions.   (line  19)
* mu-address-get-email:                  Address Functions.   (line  15)
* mu-address-get-local:                  Address Functions.   (line  23)
* mu-address-get-personal:               Address Functions.   (line   7)
* mu-body-read-line:                     Message Functions.   (line 103)
* mu-body-write:                         Message Functions.   (line 106)
* mu-closelog:                           Logging Functions.   (line  14)
* mu-folder-directory:                   Mailbox Functions.   (line  11)
* mu-logger:                             Logging Functions.   (line  11)
* mu-mail-directory:                     Mailbox Functions.   (line   7)
* mu-mailbox-append-message:             Mailbox Functions.   (line  49)
* mu-mailbox-close:                      Mailbox Functions.   (line  28)
* mu-mailbox-expunge:                    Mailbox Functions.   (line  46)
* mu-mailbox-get-message:                Mailbox Functions.   (line  40)
* mu-mailbox-get-port:                   Mailbox Functions.   (line  34)
* mu-mailbox-get-url:                    Mailbox Functions.   (line  31)
* mu-mailbox-messages-count:             Mailbox Functions.   (line  43)
* mu-mailbox-open:                       Mailbox Functions.   (line  15)
* mu-message-copy:                       Message Functions.   (line  11)
* mu-message-create:                     Message Functions.   (line   7)
* mu-message-delete:                     Message Functions.   (line  51)
* mu-message-destroy:                    Message Functions.   (line  15)
* mu-message-get-body:                   Message Functions.   (line  80)
* mu-message-get-flag:                   Message Functions.   (line  56)
* mu-message-get-header:                 Message Functions.   (line  35)
* mu-message-get-header-fields:          Message Functions.   (line  39)
* mu-message-get-lines:                  Message Functions.   (line  27)
* mu-message-get-num-parts:              Message Functions.   (line  86)
* mu-message-get-part:                   Message Functions.   (line  90)
* mu-message-get-port:                   Message Functions.   (line  70)
* mu-message-get-sender:                 Message Functions.   (line  31)
* mu-message-get-size:                   Message Functions.   (line  24)
* mu-message-get-uid:                    Message Functions.   (line  99)
* mu-message-get-user-flag:              Message Functions.   (line  63)
* mu-message-multipart?:                 Message Functions.   (line  83)
* mu-message-send:                       Message Functions.   (line  93)
* mu-message-set-flag:                   Message Functions.   (line  59)
* mu-message-set-header:                 Message Functions.   (line  18)
* mu-message-set-header-fields:          Message Functions.   (line  44)
* mu-message-set-user-flag:              Message Functions.   (line  66)
* mu-mime-add-part:                      MIME Functions.      (line  22)
* mu-mime-create:                        MIME Functions.      (line   7)
* mu-mime-get-message:                   MIME Functions.      (line  25)
* mu-mime-get-num-parts:                 MIME Functions.      (line  16)
* mu-mime-get-part:                      MIME Functions.      (line  19)
* mu-mime-multipart?:                    MIME Functions.      (line  12)
* mu-openlog:                            Logging Functions.   (line   7)
* mu-register-format:                    Other Functions.     (line   7)
* mu-strerror:                           Other Functions.     (line  25)
* mu-username->email:                    Address Functions.   (line  31)
* mu_address_aget_domain:                Address.             (line 212)
* mu_address_aget_email:                 Address.             (line 195)
* mu_address_aget_local_part:            Address.             (line 209)
* mu_address_aget_personal:              Address.             (line 215)
* mu_address_contains_email:             Address.             (line 268)
* mu_address_create:                     Address.             (line  57)
* mu_address_createv:                    Address.             (line  73)
* mu_address_destroy:                    Address.             (line  90)
* mu_address_format_string:              Address.             (line 273)
* mu_address_get_comments:               Address.             (line 165)
* mu_address_get_count:                  Address.             (line 250)
* mu_address_get_domain:                 Address.             (line 128)
* mu_address_get_email:                  Address.             (line  97)
* mu_address_get_email_count:            Address.             (line 262)
* mu_address_get_group_count:            Address.             (line 259)
* mu_address_get_local_part:             Address.             (line 115)
* mu_address_get_nth:                    Address.             (line  94)
* mu_address_get_personal:               Address.             (line 141)
* mu_address_get_route:                  Address.             (line 179)
* mu_address_get_unix_mailbox_count:     Address.             (line 265)
* mu_address_is_group:                   Address.             (line 218)
* mu_address_t:                          Address.             (line  50)
* mu_address_to_string:                  Address.             (line 237)
* mu_address_union:                      Address.             (line 270)
* mu_attribute_clear_modified:           Attribute.           (line  18)
* mu_attribute_copy:                     Attribute.           (line  89)
* mu_attribute_create:                   Attribute.           (line  10)
* mu_attribute_destroy:                  Attribute.           (line  12)
* mu_attribute_get_flags:                Attribute.           (line  70)
* mu_attribute_get_owner:                Attribute.           (line  14)
* mu_attribute_is_answered:              Attribute.           (line  26)
* mu_attribute_is_deleted:               Attribute.           (line  30)
* mu_attribute_is_draft:                 Attribute.           (line  32)
* mu_attribute_is_equal:                 Attribute.           (line  86)
* mu_attribute_is_flagged:               Attribute.           (line  28)
* mu_attribute_is_modified:              Attribute.           (line  16)
* mu_attribute_is_read:                  Attribute.           (line  36)
* mu_attribute_is_recent:                Attribute.           (line  34)
* mu_attribute_is_seen:                  Attribute.           (line  24)
* mu_attribute_is_userflag:              Attribute.           (line  22)
* mu_attribute_set_answered:             Attribute.           (line  42)
* mu_attribute_set_deleted:              Attribute.           (line  46)
* mu_attribute_set_draft:                Attribute.           (line  48)
* mu_attribute_set_flagged:              Attribute.           (line  44)
* mu_attribute_set_flags:                Attribute.           (line  72)
* mu_attribute_set_get_flags:            Attribute.           (line  83)
* mu_attribute_set_modified:             Attribute.           (line  20)
* mu_attribute_set_read:                 Attribute.           (line  52)
* mu_attribute_set_recent:               Attribute.           (line  50)
* mu_attribute_set_seen:                 Attribute.           (line  40)
* mu_attribute_set_set_flags:            Attribute.           (line  77)
* mu_attribute_set_unset_flags:          Attribute.           (line  80)
* mu_attribute_set_userflag:             Attribute.           (line  38)
* mu_attribute_to_string:                Attribute.           (line  92)
* mu_attribute_unset_answered:           Attribute.           (line  58)
* mu_attribute_unset_deleted:            Attribute.           (line  62)
* mu_attribute_unset_draft:              Attribute.           (line  64)
* mu_attribute_unset_flagged:            Attribute.           (line  60)
* mu_attribute_unset_flags:              Attribute.           (line  74)
* mu_attribute_unset_read:               Attribute.           (line  68)
* mu_attribute_unset_recent:             Attribute.           (line  66)
* mu_attribute_unset_seen:               Attribute.           (line  56)
* mu_attribute_unset_userflag:           Attribute.           (line  54)
* mu_auth_data:                          Data Types.          (line  45)
* mu_auth_data_alloc:                    Module Creation and Destruction.
                                                              (line  10)
* mu_auth_data_free:                     Module Creation and Destruction.
                                                              (line  14)
* mu_auth_fp:                            Data Types.          (line   7)
* mu_auth_init:                          Initializing libmu_auth.
                                                              (line   7)
* mu_auth_module:                        Data Types.          (line  64)
* mu_auth_nosupport:                     Existing Modules.    (line   8)
* MU_AUTH_REGISTER_ALL_MODULES:          Initializing libmu_auth.
                                                              (line  13)
* mu_auth_register_module:               Module Creation and Destruction.
                                                              (line  18)
* mu_auth_runlist:                       Obtaining Authorization Information.
                                                              (line   8)
* mu_authenticate:                       Obtaining Authorization Information.
                                                              (line  31)
* mu_authority_authenticate:             Authenticator.       (line  53)
* mu_authority_create:                   Authenticator.       (line  42)
* mu_authority_create_null:              Authenticator.       (line  59)
* mu_authority_destroy:                  Authenticator.       (line  44)
* mu_authority_get_owner:                Authenticator.       (line  46)
* mu_authority_get_ticket:               Authenticator.       (line  51)
* mu_authority_set_authenticate:         Authenticator.       (line  56)
* mu_authority_set_ticket:               Authenticator.       (line  48)
* mu_body_clear_modified:                Body.                (line  20)
* mu_body_create:                        Body.                (line  10)
* mu_body_destroy:                       Body.                (line  13)
* mu_body_get_filename:                  Body.                (line  28)
* mu_body_get_owner:                     Body.                (line  16)
* mu_body_get_stream:                    Body.                (line  22)
* mu_body_is_modified:                   Body.                (line  18)
* mu_body_lines:                         Body.                (line  35)
* mu_body_set_lines:                     Body.                (line  38)
* mu_body_set_size:                      Body.                (line  33)
* mu_body_set_stream:                    Body.                (line  25)
* mu_body_size:                          Body.                (line  30)
* mu_decoder_stream_create:              Stream.              (line  58)
* mu_encoder_stream_create:              Stream.              (line  55)
* mu_envelope_create:                    Envelope.            (line  10)
* mu_envelope_date:                      Envelope.            (line  32)
* mu_envelope_destroy:                   Envelope.            (line  13)
* mu_envelope_get_owner:                 Envelope.            (line  16)
* mu_envelope_sender:                    Envelope.            (line  19)
* mu_envelope_set_date:                  Envelope.            (line  37)
* mu_envelope_set_sender:                Envelope.            (line  25)
* mu_file_stream_create:                 Stream.              (line  43)
* mu_filter_prog_stream_create:          Stream.              (line  69)
* mu_folder_close:                       Folder.              (line  42)
* mu_folder_create:                      Folder.              (line  36)
* mu_folder_delete:                      Folder.              (line  44)
* mu_folder_destroy:                     Folder.              (line  38)
* mu_folder_get_authority:               Folder.              (line  74)
* mu_folder_get_debug:                   Folder.              (line  69)
* mu_folder_get_observable:              Folder.              (line  65)
* mu_folder_get_stream:                  Folder.              (line  60)
* mu_folder_get_url:                     Folder.              (line  78)
* mu_folder_has_debug:                   Folder.              (line  67)
* mu_folder_list:                        Folder.              (line  55)
* mu_folder_lsub:                        Folder.              (line  58)
* mu_folder_open:                        Folder.              (line  40)
* mu_folder_rename:                      Folder.              (line  47)
* mu_folder_set_authority:               Folder.              (line  76)
* mu_folder_set_debug:                   Folder.              (line  71)
* mu_folder_set_stream:                  Folder.              (line  62)
* mu_folder_set_url:                     Folder.              (line  80)
* mu_folder_subscribe:                   Folder.              (line  49)
* mu_folder_unsubscribe:                 Folder.              (line  52)
* mu_get_auth_by_name:                   Obtaining Authorization Information.
                                                              (line  22)
* mu_get_auth_by_uid:                    Obtaining Authorization Information.
                                                              (line  26)
* mu_header_aget_field_name:             Headers.             (line 191)
* mu_header_aget_field_value:            Headers.             (line 188)
* mu_header_aget_field_value_unfold:     Headers.             (line 203)
* mu_header_aget_value:                  Headers.             (line 166)
* mu_header_aget_value_unfold:           Headers.             (line 197)
* mu_header_clear_modified:              Headers.             (line  25)
* mu_header_create:                      Headers.             (line  14)
* mu_header_destroy:                     Headers.             (line  18)
* mu_header_get_address:                 Headers.             (line 170)
* mu_header_get_field_count:             Headers.             (line 179)
* mu_header_get_field_name:              Headers.             (line 185)
* mu_header_get_field_value:             Headers.             (line 182)
* mu_header_get_field_value_unfold:      Headers.             (line 200)
* mu_header_get_owner:                   Headers.             (line  21)
* mu_header_get_stream:                  Headers.             (line 173)
* mu_header_get_value:                   Headers.             (line 161)
* mu_header_get_value_unfold:            Headers.             (line 194)
* mu_header_is_modified:                 Headers.             (line  23)
* mu_header_lines:                       Headers.             (line 207)
* mu_header_set_fill:                    Headers.             (line 229)
* mu_header_set_get_fvalue:              Headers.             (line 219)
* mu_header_set_get_value:               Headers.             (line 215)
* mu_header_set_lines:                   Headers.             (line 225)
* mu_header_set_set_value:               Headers.             (line 211)
* mu_header_set_size:                    Headers.             (line 222)
* mu_header_set_stream:                  Headers.             (line 176)
* mu_header_set_value:                   Headers.             (line  28)
* mu_header_size:                        Headers.             (line 205)
* mu_iterator_advance:                   Iterator.            (line  33)
* mu_iterator_attach:                    Iterator.            (line  27)
* mu_iterator_create:                    Iterator.            (line  11)
* mu_iterator_current:                   Iterator.            (line  22)
* mu_iterator_destroy:                   Iterator.            (line  16)
* mu_iterator_detach:                    Iterator.            (line  30)
* mu_iterator_dup:                       Iterator.            (line  14)
* mu_iterator_first:                     Iterator.            (line  18)
* mu_iterator_is_done:                   Iterator.            (line  24)
* mu_iterator_next:                      Iterator.            (line  20)
* mu_iterator_set_curitem_p:             Iterator.            (line  54)
* mu_iterator_set_destroy:               Iterator.            (line  51)
* mu_iterator_set_dup:                   Iterator.            (line  48)
* mu_iterator_set_finished_p:            Iterator.            (line  45)
* mu_iterator_set_first:                 Iterator.            (line  36)
* mu_iterator_set_getitem:               Iterator.            (line  42)
* mu_iterator_set_next:                  Iterator.            (line  39)
* mu_locker_create:                      Locker.              (line  24)
* mu_locker_destroy:                     Locker.              (line  26)
* mu_locker_get_expire_time:             Locker.              (line  43)
* mu_locker_get_external:                Locker.              (line  49)
* mu_locker_get_flags:                   Locker.              (line  41)
* mu_locker_get_retries:                 Locker.              (line  45)
* mu_locker_get_retry_sleep:             Locker.              (line  47)
* mu_locker_lock:                        Locker.              (line  51)
* mu_locker_remove_lock:                 Locker.              (line  57)
* mu_locker_set_default_expire_timeout:  Locker.              (line  17)
* mu_locker_set_default_external_program: Locker.             (line  19)
* mu_locker_set_default_flags:           Locker.              (line  11)
* mu_locker_set_default_retry_count:     Locker.              (line  15)
* mu_locker_set_default_retry_timeout:   Locker.              (line  13)
* mu_locker_set_expire_time:             Locker.              (line  32)
* mu_locker_set_external:                Locker.              (line  39)
* mu_locker_set_flags:                   Locker.              (line  30)
* mu_locker_set_retries:                 Locker.              (line  34)
* mu_locker_set_retry_sleep:             Locker.              (line  36)
* mu_locker_touchlock:                   Locker.              (line  53)
* mu_locker_unlock:                      Locker.              (line  55)
* mu_mailbox_append_message:             Mailbox.             (line 134)
* mu_mailbox_close:                      Mailbox.             (line  80)
* mu_mailbox_create:                     Mailbox.             (line  33)
* mu_mailbox_create_default:             Mailbox.             (line  52)
* mu_mailbox_destroy:                    Mailbox.             (line  57)
* mu_mailbox_expunge:                    Mailbox.             (line 169)
* mu_mailbox_flush:                      Mailbox.             (line  88)
* mu_mailbox_get_debug:                  Mailbox.             (line 258)
* mu_mailbox_get_folder:                 Mailbox.             (line  91)
* mu_mailbox_get_locker:                 Mailbox.             (line 221)
* mu_mailbox_get_message:                Mailbox.             (line 121)
* mu_mailbox_get_observable:             Mailbox.             (line 270)
* mu_mailbox_get_property:               Mailbox.             (line 239)
* mu_mailbox_get_size:                   Mailbox.             (line 180)
* mu_mailbox_get_stream:                 Mailbox.             (line 203)
* mu_mailbox_get_url:                    Mailbox.             (line 247)
* mu_mailbox_has_debug:                  Mailbox.             (line 255)
* mu_mailbox_is_updated:                 Mailbox.             (line 188)
* mu_mailbox_lock:                       Mailbox.             (line 281)
* mu_mailbox_message_unseen:             Mailbox.             (line 161)
* mu_mailbox_messages_count:             Mailbox.             (line 143)
* mu_mailbox_messages_recent:            Mailbox.             (line 152)
* mu_mailbox_open:                       Mailbox.             (line  60)
* mu_mailbox_save_attributes:            Mailbox.             (line 177)
* mu_mailbox_scan:                       Mailbox.             (line 191)
* mu_mailbox_set_debug:                  Mailbox.             (line 267)
* mu_mailbox_set_folder:                 Mailbox.             (line 100)
* mu_mailbox_set_locker:                 Mailbox.             (line 230)
* mu_mailbox_set_stream:                 Mailbox.             (line 212)
* mu_mailbox_t:                          Mailbox.             (line  10)
* mu_mailbox_uidnext:                    Mailbox.             (line 112)
* mu_mailbox_uidvalidity:                Mailbox.             (line 103)
* mu_mailbox_unlock:                     Mailbox.             (line 283)
* mu_mailcap_create:                     Mailcap.             (line 140)
* mu_mailcap_destroy:                    Mailcap.             (line 147)
* mu_mailcap_entries_count:              Mailcap.             (line 151)
* mu_mailcap_entry_copiousoutput:        Mailcap.             (line 230)
* mu_mailcap_entry_fields_count:         Mailcap.             (line 163)
* mu_mailcap_entry_get_compose:          Mailcap.             (line 183)
* mu_mailcap_entry_get_composetyped:     Mailcap.             (line 187)
* mu_mailcap_entry_get_description:      Mailcap.             (line 211)
* mu_mailcap_entry_get_edit:             Mailcap.             (line 192)
* mu_mailcap_entry_get_field:            Mailcap.             (line 177)
* mu_mailcap_entry_get_nametemplate:     Mailcap.             (line 216)
* mu_mailcap_entry_get_notes:            Mailcap.             (line 221)
* mu_mailcap_entry_get_test:             Mailcap.             (line 202)
* mu_mailcap_entry_get_textualnewlines:  Mailcap.             (line 197)
* mu_mailcap_entry_get_typefield:        Mailcap.             (line 171)
* mu_mailcap_entry_get_value:            Mailcap.             (line 180)
* mu_mailcap_entry_get_viewcommand:      Mailcap.             (line 174)
* mu_mailcap_entry_get_x11bitmap:        Mailcap.             (line 206)
* mu_mailcap_entry_needsterminal:        Mailcap.             (line 225)
* mu_mailcap_get_entry:                  Mailcap.             (line 159)
* mu_mailcap_t:                          Mailcap.             (line  36)
* mu_mailer_check_from:                  Mailer.              (line  49)
* mu_mailer_check_to:                    Mailer.              (line  51)
* mu_mailer_close:                       Mailer.              (line  16)
* mu_mailer_create:                      Mailer.              (line  10)
* mu_mailer_destroy:                     Mailer.              (line  12)
* mu_mailer_get_debug:                   Mailer.              (line  41)
* mu_mailer_get_observable:              Mailer.              (line  45)
* mu_mailer_get_property:                Mailer.              (line  35)
* mu_mailer_get_stream:                  Mailer.              (line  37)
* mu_mailer_get_url:                     Mailer.              (line  47)
* mu_mailer_open:                        Mailer.              (line  14)
* mu_mailer_send_message:                Mailer.              (line  19)
* mu_mailer_set_debug:                   Mailer.              (line  43)
* mu_mailer_set_stream:                  Mailer.              (line  39)
* mu_mapfile_stream_create:              Stream.              (line  49)
* mu_memory_stream_create:               Stream.              (line  52)
* mu_message_aget_attachment_name:       Message.             (line 142)
* mu_message_clear_modified:             Message.             (line  40)
* mu_message_create:                     Message.             (line  28)
* mu_message_create_attachment:          Message.             (line 127)
* mu_message_create_copy:                Message.             (line  34)
* mu_message_destroy:                    Message.             (line  30)
* mu_message_encapsulate:                Message.             (line 133)
* mu_message_get_attachment_name:        Message.             (line 139)
* mu_message_get_attribute:              Message.             (line  76)
* mu_message_get_body:                   Message.             (line  64)
* mu_message_get_envelope:               Message.             (line  51)
* mu_message_get_header:                 Message.             (line  57)
* mu_message_get_mailbox:                Message.             (line  43)
* mu_message_get_num_parts:              Message.             (line 101)
* mu_message_get_observable:             Message.             (line  82)
* mu_message_get_owner:                  Message.             (line  36)
* mu_message_get_part:                   Message.             (line 107)
* mu_message_get_stream:                 Message.             (line  70)
* mu_message_get_uid:                    Message.             (line 120)
* mu_message_get_uidl:                   Message.             (line 114)
* mu_message_is_modified:                Message.             (line  38)
* mu_message_is_multipart:               Message.             (line  84)
* mu_message_lines:                      Message.             (line  95)
* mu_message_ref:                        Message.             (line  48)
* mu_message_save_attachment:            Message.             (line 130)
* mu_message_save_to_mailbox:            Message.             (line 145)
* mu_message_set_attribute:              Message.             (line  79)
* mu_message_set_body:                   Message.             (line  67)
* mu_message_set_envelope:               Message.             (line  54)
* mu_message_set_get_num_parts:          Message.             (line 104)
* mu_message_set_get_part:               Message.             (line 111)
* mu_message_set_header:                 Message.             (line  61)
* mu_message_set_is_multipart:           Message.             (line  88)
* mu_message_set_lines:                  Message.             (line  98)
* mu_message_set_mailbox:                Message.             (line  46)
* mu_message_set_size:                   Message.             (line  93)
* mu_message_set_stream:                 Message.             (line  73)
* mu_message_set_uid:                    Message.             (line 123)
* mu_message_set_uidl:                   Message.             (line 118)
* mu_message_size:                       Message.             (line  90)
* mu_message_unencapsulate:              Message.             (line 136)
* mu_parse822_addr_spec:                 Parse822.            (line  90)
* mu_parse822_address:                   Parse822.            (line  81)
* mu_parse822_address_list:              Parse822.            (line  72)
* mu_parse822_atom:                      Parse822.            (line  54)
* mu_parse822_comment:                   Parse822.            (line  51)
* mu_parse822_d_text:                    Parse822.            (line  69)
* mu_parse822_date:                      Parse822.            (line 126)
* mu_parse822_date_time:                 Parse822.            (line 132)
* mu_parse822_day:                       Parse822.            (line 123)
* mu_parse822_digits:                    Parse822.            (line  45)
* mu_parse822_domain:                    Parse822.            (line  99)
* mu_parse822_domain_literal:            Parse822.            (line 108)
* mu_parse822_domain_ref:                Parse822.            (line 105)
* mu_parse822_field_body:                Parse822.            (line 117)
* mu_parse822_field_name:                Parse822.            (line 120)
* mu_parse822_group:                     Parse822.            (line  78)
* mu_parse822_is_atom_char:              Parse822.            (line  24)
* mu_parse822_is_char:                   Parse822.            (line  10)
* mu_parse822_is_ctl:                    Parse822.            (line  14)
* mu_parse822_is_d_text:                 Parse822.            (line  28)
* mu_parse822_is_digit:                  Parse822.            (line  12)
* mu_parse822_is_htab:                   Parse822.            (line  18)
* mu_parse822_is_lwsp_char:              Parse822.            (line  20)
* mu_parse822_is_q_text:                 Parse822.            (line  26)
* mu_parse822_is_smtp_q:                 Parse822.            (line  30)
* mu_parse822_is_space:                  Parse822.            (line  16)
* mu_parse822_is_special:                Parse822.            (line  22)
* mu_parse822_local_part:                Parse822.            (line  96)
* mu_parse822_mail_box:                  Parse822.            (line  75)
* mu_parse822_phrase:                    Parse822.            (line  66)
* mu_parse822_quote_local_part:          Parse822.            (line 114)
* mu_parse822_quote_string:              Parse822.            (line 111)
* mu_parse822_quoted_pair:               Parse822.            (line  57)
* mu_parse822_quoted_string:             Parse822.            (line  60)
* mu_parse822_route:                     Parse822.            (line  87)
* mu_parse822_route_addr:                Parse822.            (line  84)
* mu_parse822_skip_comments:             Parse822.            (line  40)
* mu_parse822_skip_crlf:                 Parse822.            (line  32)
* mu_parse822_skip_lwsp:                 Parse822.            (line  37)
* mu_parse822_skip_lwsp_char:            Parse822.            (line  35)
* mu_parse822_skip_nl:                   Parse822.            (line  42)
* mu_parse822_special:                   Parse822.            (line  48)
* mu_parse822_sub_domain:                Parse822.            (line 102)
* mu_parse822_time:                      Parse822.            (line 129)
* mu_parse822_unix_mbox:                 Parse822.            (line  93)
* mu_parse822_word:                      Parse822.            (line  63)
* mu_prog_stream_create:                 Stream.              (line  66)
* mu_sieve_abort:                        Logging and Diagnostic Functions.
                                                              (line  22)
* mu_sieve_action_log_t:                 Sieve Data Types.    (line 173)
* mu_sieve_action_lookup:                Symbol Space Functions.
                                                              (line  13)
* mu_sieve_comparator_t:                 Sieve Data Types.    (line 214)
* mu_sieve_compile:                      Compiling and Executing the Script.
                                                              (line   8)
* mu_sieve_data_type:                    Sieve Data Types.    (line  16)
* mu_sieve_debug:                        Logging and Diagnostic Functions.
                                                              (line  13)
* mu_sieve_destructor_t:                 Sieve Data Types.    (line 230)
* mu_sieve_disass:                       Compiling and Executing the Script.
                                                              (line  21)
* mu_sieve_error:                        Logging and Diagnostic Functions.
                                                              (line   8)
* mu_sieve_get_daemon_email:             Manipulating the Sieve Machine.
                                                              (line  80)
* mu_sieve_get_data:                     Manipulating the Sieve Machine.
                                                              (line  53)
* mu_sieve_get_debug_level:              Manipulating the Sieve Machine.
                                                              (line  66)
* mu_sieve_get_locus:                    Manipulating the Sieve Machine.
                                                              (line  76)
* mu_sieve_get_mailer:                   Manipulating the Sieve Machine.
                                                              (line  72)
* mu_sieve_get_message:                  Manipulating the Sieve Machine.
                                                              (line  58)
* mu_sieve_get_message_num:              Manipulating the Sieve Machine.
                                                              (line  61)
* mu_sieve_get_ticket:                   Manipulating the Sieve Machine.
                                                              (line  69)
* mu_sieve_handler_t:                    Sieve Data Types.    (line 125)
* mu_sieve_is_dry_run:                   Manipulating the Sieve Machine.
                                                              (line 166)
* mu_sieve_load_ext:                     Symbol Space Functions.
                                                              (line  37)
* mu_sieve_locus_t:                      Sieve Data Types.    (line 115)
* mu_sieve_log_action:                   Logging and Diagnostic Functions.
                                                              (line  18)
* mu_sieve_machine_add_destructor:       Manipulating the Sieve Machine.
                                                              (line  25)
* mu_sieve_machine_destroy:              Manipulating the Sieve Machine.
                                                              (line  18)
* mu_sieve_machine_init:                 Manipulating the Sieve Machine.
                                                              (line  11)
* mu_sieve_mailbox:                      Compiling and Executing the Script.
                                                              (line  12)
* mu_sieve_malloc:                       Memory Allocation.   (line  12)
* mu_sieve_message:                      Compiling and Executing the Script.
                                                              (line  17)
* mu_sieve_mfree:                        Memory Allocation.   (line  31)
* mu_sieve_mrealloc:                     Memory Allocation.   (line  21)
* mu_sieve_mstrdup:                      Memory Allocation.   (line  16)
* mu_sieve_parse_error_t:                Sieve Data Types.    (line 159)
* mu_sieve_printf_t:                     Sieve Data Types.    (line 143)
* mu_sieve_register_action:              Symbol Space Functions.
                                                              (line  25)
* mu_sieve_register_comparator:          Symbol Space Functions.
                                                              (line  31)
* mu_sieve_register_test:                Symbol Space Functions.
                                                              (line  20)
* mu_sieve_relcmp_t:                     Sieve Data Types.    (line 209)
* mu_sieve_relcmpn_t:                    Sieve Data Types.    (line 210)
* mu_sieve_retrieve_t:                   Sieve Data Types.    (line 223)
* mu_sieve_runtime_tag_t:                Sieve Data Types.    (line 103)
* mu_sieve_set_daemon_email:             Manipulating the Sieve Machine.
                                                              (line 162)
* mu_sieve_set_debug:                    Manipulating the Sieve Machine.
                                                              (line 119)
* mu_sieve_set_debug_level:              Manipulating the Sieve Machine.
                                                              (line 125)
* mu_sieve_set_error:                    Manipulating the Sieve Machine.
                                                              (line  88)
* mu_sieve_set_logger:                   Manipulating the Sieve Machine.
                                                              (line 147)
* mu_sieve_set_mailer:                   Manipulating the Sieve Machine.
                                                              (line 158)
* mu_sieve_set_parse_error:              Manipulating the Sieve Machine.
                                                              (line 101)
* mu_sieve_set_ticket:                   Manipulating the Sieve Machine.
                                                              (line 153)
* mu_sieve_tag_checker_t:                Sieve Data Types.    (line 237)
* mu_sieve_tag_def_t:                    Sieve Data Types.    (line  88)
* mu_sieve_tag_lookup:                   Symbol Space Functions.
                                                              (line  34)
* mu_sieve_test_lookup:                  Symbol Space Functions.
                                                              (line   8)
* mu_sieve_type_str:                     Manipulating the Sieve Machine.
                                                              (line 173)
* mu_sieve_value_t:                      Sieve Data Types.    (line  45)
* mu_stdio_stream_create:                Stream.              (line  61)
* MU_STREAM_ALLOW_LINKS:                 Stream.              (line  40)
* MU_STREAM_APPEND:                      Stream.              (line  21)
* mu_stream_close:                       Stream.              (line  75)
* MU_STREAM_CREAT:                       Stream.              (line  24)
* mu_stream_create:                      Stream.              (line 103)
* mu_stream_destroy:                     Stream.              (line  71)
* mu_stream_flush:                       Stream.              (line 100)
* mu_stream_get_fd:                      Stream.              (line  79)
* mu_stream_get_fd2:                     Stream.              (line  82)
* mu_stream_get_flags:                   Stream.              (line 110)
* mu_stream_get_owner:                   Stream.              (line 106)
* mu_stream_get_property:                Stream.              (line 115)
* mu_stream_get_state:                   Stream.              (line 120)
* mu_stream_is_seekable:                 Stream.              (line  77)
* MU_STREAM_NO_CHECK:                    Stream.              (line  31)
* MU_STREAM_NO_CLOSE:                    Stream.              (line  36)
* MU_STREAM_NONBLOCK:                    Stream.              (line  28)
* mu_stream_open:                        Stream.              (line  73)
* MU_STREAM_RDWR:                        Stream.              (line  18)
* mu_stream_read:                        Stream.              (line  85)
* MU_STREAM_READ:                        Stream.              (line  12)
* mu_stream_readline:                    Stream.              (line  88)
* mu_stream_seek:                        Stream.              (line 176)
* MU_STREAM_SEEKABLE:                    Stream.              (line  34)
* mu_stream_sequential_readline:         Stream.              (line 170)
* mu_stream_sequential_write:            Stream.              (line 173)
* mu_stream_set_close:                   Stream.              (line 140)
* mu_stream_set_destroy:                 Stream.              (line 134)
* mu_stream_set_fd:                      Stream.              (line 143)
* mu_stream_set_flags:                   Stream.              (line 112)
* mu_stream_set_flush:                   Stream.              (line 164)
* mu_stream_set_open:                    Stream.              (line 137)
* mu_stream_set_owner:                   Stream.              (line 108)
* mu_stream_set_property:                Stream.              (line 118)
* mu_stream_set_read:                    Stream.              (line 147)
* mu_stream_set_readline:                Stream.              (line 151)
* mu_stream_set_size:                    Stream.              (line 154)
* mu_stream_set_strerror:                Stream.              (line 167)
* mu_stream_set_truncate:                Stream.              (line 157)
* mu_stream_set_write:                   Stream.              (line 161)
* mu_stream_setbufsiz:                   Stream.              (line  98)
* mu_stream_size:                        Stream.              (line  90)
* mu_stream_strerror:                    Stream.              (line 178)
* mu_stream_write:                       Stream.              (line  96)
* MU_STREAM_WRITE:                       Stream.              (line  15)
* mu_tcp_stream_create:                  Stream.              (line  46)
* mu_ticket_create:                      Authenticator.       (line  21)
* mu_ticket_destroy:                     Authenticator.       (line  23)
* mu_ticket_get_data:                    Authenticator.       (line  38)
* mu_ticket_get_owner:                   Authenticator.       (line  28)
* mu_ticket_pop:                         Authenticator.       (line  34)
* mu_ticket_set_data:                    Authenticator.       (line  36)
* mu_ticket_set_destroy:                 Authenticator.       (line  26)
* mu_ticket_set_pop:                     Authenticator.       (line  31)
* mu_url_create:                         URL.                 (line 117)
* mu_url_decode:                         URL.                 (line 178)
* mu_url_destroy:                        URL.                 (line 120)
* mu_url_get_auth:                       URL.                 (line 151)
* mu_url_get_host:                       URL.                 (line 154)
* mu_url_get_passwd:                     URL.                 (line 148)
* mu_url_get_path:                       URL.                 (line 159)
* mu_url_get_port:                       URL.                 (line 156)
* mu_url_get_query:                      URL.                 (line 162)
* mu_url_get_scheme:                     URL.                 (line 142)
* mu_url_get_user:                       URL.                 (line 145)
* mu_url_is_same_host:                   URL.                 (line 174)
* mu_url_is_same_path:                   URL.                 (line 172)
* mu_url_is_same_port:                   URL.                 (line 176)
* mu_url_is_same_scheme:                 URL.                 (line 168)
* mu_url_is_same_user:                   URL.                 (line 170)
* mu_url_is_scheme:                      URL.                 (line 166)
* mu_url_is_ticket:                      URL.                 (line 183)
* mu_url_parse:                          URL.                 (line 123)
* mu_url_to_string:                      URL.                 (line 164)
* mu_wicket_create:                      Authenticator.       (line  62)
* mu_wicket_destroy:                     Authenticator.       (line  64)
* mu_wicket_get_filename:                Authenticator.       (line  69)
* mu_wicket_get_ticket:                  Authenticator.       (line  75)
* mu_wicket_set_filename:                Authenticator.       (line  66)
* mu_wicket_set_ticket:                  Authenticator.       (line  72)
* next DAY:                              Day of week items.   (line  15)
* next in date strings:                  General date syntax. (line  26)
* no-header:                             Conf-readmsg.        (line  18)
* no-site-config, --no-site-config option, described: configuration.
                                                              (line  24)
* no-site-config, --no-site-config option, introduced: Common Options.
                                                              (line  83)
* no-user-config, --no-user-config option, described: configuration.
                                                              (line  34)
* no-user-config, --no-user-config option, introduced: Common Options.
                                                              (line  86)
* noon in date strings:                  Time of day items.   (line  22)
* now in date strings:                   Relative items in date strings.
                                                              (line  33)
* numaddr:                               External Tests.      (line   8)
* other-mailbox-mode:                    Conf-imap4d.         (line  39)
* other-namespace:                       Conf-imap4d.         (line  31)
* overflow-control-interval:             Security Settings.   (line  21)
* overflow-delay-time:                   Security Settings.   (line  17)
* package:                               Format String Diffs. (line  20)
* package_string:                        Format String Diffs. (line  23)
* passwd:                                SQL Statement.       (line  83)
* passwd-dir:                            Virtdomain Statement.
                                                              (line  29)
* pidfile:                               General Server Configuration.
                                                              (line  69)
* pipe:                                  External Actions.    (line  69)
* pm in date strings:                    Time of day items.   (line  22)
* port <1>:                              SQL Statement.       (line  72)
* port:                                  General Server Configuration.
                                                              (line  76)
* preauth:                               Conf-imap4d.         (line  60)
* preauth-only:                          Conf-imap4d.         (line  99)
* preserve:                              Movemail Configuration.
                                                              (line  10)
* printhdr:                              Format String Diffs. (line  92)
* program-id:                            Movemail Configuration.
                                                              (line  24)
* quota-db:                              Conf-maidag.         (line  35)
* rcpt:                                  Format String Diffs. (line  77)
* redirect:                              Built-in Actions.    (line 181)
* references:                            Format String Diffs. (line 102)
* reject:                                Built-in Actions.    (line 103)
* reply_regex:                           Format String Diffs. (line  36)
* request-control-interval:              Security Settings.   (line  14)
* retry-count:                           Locking Statement.   (line  54)
* retry-timeout:                         Locking Statement.   (line  58)
* reuse-address:                         Conf-maidag.         (line  86)
* reverse:                               Movemail Configuration.
                                                              (line  13)
* service:                               PAM Statement.       (line  21)
* shared-mailbox-mode:                   Conf-imap4d.         (line  35)
* shared-namespace:                      Conf-imap4d.         (line  27)
* show-all-match:                        Conf-readmsg.        (line  27)
* show-config-options, --show-config-options option, described: Common Options.
                                                              (line  60)
* sieve:                                 Sieve Configuration. (line  21)
* sieve-filter:                          Conf-maidag.         (line  38)
* sieve_machine_t:                       Sieve Data Types.    (line   7)
* single-process:                        Server Statement.    (line  46)
* size:                                  Built-in Tests.      (line  56)
* spamd:                                 External Tests.      (line  42)
* stat-file:                             Conf-pop3d.          (line  45)
* stderr:                                Conf-maidag.         (line  65)
* stop:                                  Built-in Actions.    (line  26)
* string_to_flags:                       Attribute.           (line  94)
* tag:                                   Logging Statement.   (line  31)
* this in date strings:                  Relative items in date strings.
                                                              (line  33)
* ticket:                                Sieve Configuration. (line  59)
* timeout <1>:                           Server Statement.    (line  60)
* timeout:                               General Server Configuration.
                                                              (line  83)
* timestamp:                             External Tests.      (line 141)
* tls-required <1>:                      Conf-imap4d.         (line  56)
* tls-required:                          Conf-pop3d.          (line  38)
* today in date strings:                 Relative items in date strings.
                                                              (line  33)
* tomorrow in date strings:              Relative items in date strings.
                                                              (line  29)
* transcript:                            Server Statement.    (line  51)
* true:                                  Built-in Tests.      (line  10)
* uidl:                                  Movemail Configuration.
                                                              (line  65)
* undelete:                              Conf-pop3d.          (line  27)
* unre:                                  Format String Diffs. (line  29)
* url:                                   Mailer Statement.    (line  23)
* usage, --usage option, described:      Common Options.      (line  45)
* user:                                  SQL Statement.       (line  80)
* vacation:                              External Actions.    (line 102)
* verbose <1>:                           Sieve Configuration. (line  66)
* verbose:                               Movemail Configuration.
                                                              (line  69)
* version:                               Format String Diffs. (line  26)
* version, --version option, described:  Common Options.      (line  56)
* weedlist:                              Conf-readmsg.        (line  12)
* week in date strings:                  Relative items in date strings.
                                                              (line  15)
* year in date strings:                  Relative items in date strings.
                                                              (line  15)
* yesterday in date strings:             Relative items in date strings.
                                                              (line  29)


File: mailutils.info,  Node: Variable Index,  Next: Keyword Index,  Prev: Function Index,  Up: Top

Variable Index
**************

 [index ]
* Menu:

* append, mail variable:                 Mail Variables.      (line  10)
* appenddeadletter, mail variable:       Mail Variables.      (line  19)
* ARGP_HELP_FMT, environment variable:   Usage Vars.          (line  18)
* askbcc, mail variable:                 Mail Variables.      (line  27)
* askcc, mail variable:                  Mail Variables.      (line  34)
* asksub, mail variable:                 Mail Variables.      (line  41)
* autoinc, mail variable:                Mail Variables.      (line  48)
* autoprint, mail variable:              Mail Variables.      (line  54)
* bang, mail variable:                   Mail Variables.      (line  61)
* byname, mail variable:                 Mail Variables.      (line  68)
* charset, mail variable:                Mail Variables.      (line  91)
* cmd, mail variable:                    Mail Variables.      (line 102)
* columns, mail variable:                Mail Variables.      (line 109)
* crt, mail variable:                    Mail Variables.      (line 115)
* datefield, mail variable:              Mail Variables.      (line  79)
* debug, mail variable:                  Mail Variables.      (line 127)
* decode-fallback, mail variable:        Mail Variables.      (line 139)
* doc-opt-col:                           Usage Vars.          (line  91)
* dot, mail variable:                    Mail Variables.      (line 165)
* dup-args:                              Usage Vars.          (line  48)
* dup-args-note:                         Usage Vars.          (line  65)
* editheaders, mail variable:            Mail Variables.      (line 180)
* emptystart, mail variable:             Mail Variables.      (line 172)
* escape, mail variable:                 Mail Variables.      (line 188)
* flipr, mail variable:                  Mail Variables.      (line 195)
* folder, mail variable:                 Mail Variables.      (line 202)
* header, mail variable:                 Mail Variables.      (line 219)
* header-col:                            Usage Vars.          (line 127)
* hold, mail variable:                   Mail Variables.      (line 271)
* ignore, mail variable:                 Mail Variables.      (line 280)
* ignoreeof, mail variable:              Mail Variables.      (line 288)
* indentprefix, mail variable:           Mail Variables.      (line 295)
* keepsave, mail variable:               Mail Variables.      (line 319)
* LD_LIBRARY_PATH:                       Require Statement.   (line  84)
* long-opt-col:                          Usage Vars.          (line  83)
* LTDL_LIBRARY_PATH:                     Require Statement.   (line  84)
* mailx, mail variable:                  Mail Variables.      (line 327)
* metamail, mail variable:               Mail Variables.      (line 342)
* metoo, mail variable:                  Mail Variables.      (line 377)
* mimenoask, mail variable:              Mail Variables.      (line 361)
* mode, mail variable:                   Mail Variables.      (line 385)
* mu_auth_generic_module:                Existing Modules.    (line  16)
* mu_auth_pam_module:                    Existing Modules.    (line  24)
* mu_auth_sql_module:                    Existing Modules.    (line  28)
* mu_auth_system_module:                 Existing Modules.    (line  11)
* mu_auth_virtual_module:                Existing Modules.    (line  38)
* MU_DEFAULT_SCHEME:                     Mailbox Statement.   (line 172)
* nullbody, mail variable:               Mail Variables.      (line 411)
* nullbodymsg:                           Mail Variables.      (line 437)
* onehop, mail variable:                 Mail Variables.      (line 447)
* opt-doc-col:                           Usage Vars.          (line 113)
* outfolder, mail variable:              Mail Variables.      (line 454)
* page, mail variable:                   Mail Variables.      (line 462)
* prompt, mail variable:                 Mail Variables.      (line 469)
* quiet, mail variable:                  Mail Variables.      (line 475)
* quit, mail variable:                   Mail Variables.      (line 482)
* rc, mail variable:                     Mail Variables.      (line 488)
* readonly, mail variable:               Mail Variables.      (line 496)
* record, mail variable:                 Mail Variables.      (line 505)
* regex, mail variable:                  Mail Variables.      (line 517)
* replyprefix, mail variable:            Mail Variables.      (line 524)
* replyregex, mail variable:             Mail Variables.      (line 531)
* rmargin:                               Usage Vars.          (line 143)
* save, mail variable:                   Mail Variables.      (line 548)
* screen, mail variable:                 Mail Variables.      (line 556)
* sendmail, mail variable:               Mail Variables.      (line 562)
* sendwait, mail variable:               Mail Variables.      (line 568)
* short-opt-col:                         Usage Vars.          (line  75)
* showto, mail variable:                 Mail Variables.      (line 575)
* sign, mail variable:                   Mail Variables.      (line 590)
* Sign, mail variable:                   Mail Variables.      (line 582)
* string:                                Profile Variable Diffs.
                                                              (line   7)
* subject, mail variable:                Mail Variables.      (line 606)
* toplines, mail variable:               Mail Variables.      (line 613)
* TZ:                                    Specifying time zone rules.
                                                              (line   6)
* usage-indent:                          Usage Vars.          (line 139)
* verbose, mail variable:                Mail Variables.      (line 640)
* xmailer, mail variable:                Mail Variables.      (line 647)


File: mailutils.info,  Node: Keyword Index,  Next: Program Index,  Prev: Variable Index,  Up: Top

Keyword Index
*************

 [index ]
* Menu:

* !, mail command:                       Shell Escapes.       (line   6)
* #include, sieve:                       #include.            (line   6)
* #searchpath, sieve:                    #searchpath.         (line   6)
* :all, sieve:                           Tests.               (line  87)
* :comparator, sieve:                    Tests.               (line  68)
* :contains, sieve:                      Tests.               (line  20)
* :count, sieve:                         Tests.               (line  61)
* :domain, sieve:                        Tests.               (line  93)
* :is, sieve:                            Tests.               (line  13)
* :localpart, sieve:                     Tests.               (line  90)
* :matches, sieve:                       Tests.               (line  27)
* :mime:                                 Built-in Tests.      (line 149)
* :over <1>:                             External Tests.      (line  31)
* :over:                                 Built-in Tests.      (line  72)
* :regex, sieve:                         Tests.               (line  35)
* :under <1>:                            External Tests.      (line  34)
* :under:                                Built-in Tests.      (line  75)
* :value, sieve:                         Tests.               (line  39)
* =, mail command:                       Displaying Information.
                                                              (line   6)
* ?, mail command:                       Obtaining Online Help.
                                                              (line   6)
* acl:                                   ACL Statement.       (line   6)
* alias, mail command:                   Aliasing.            (line   6)
* all, sieve:                            Tests.               (line  87)
* allof:                                 Tests and Conditions.
                                                              (line  22)
* alternates, mail command:              Aliasing.            (line   6)
* and, sieve:                            Tests and Conditions.
                                                              (line  22)
* any:                                   ACL Statement.       (line  50)
* anyof:                                 Tests and Conditions.
                                                              (line  22)
* append:                                Mail Variables.      (line   8)
* appenddeadletter:                      Mail Variables.      (line  17)
* askbcc:                                Mail Variables.      (line  25)
* askcc:                                 Mail Variables.      (line  32)
* asksub:                                Mail Variables.      (line  39)
* auth:                                  Auth Statement.      (line   6)
* autoinc:                               Mail Variables.      (line  46)
* autoprint:                             Mail Variables.      (line  52)
* bang:                                  Mail Variables.      (line  59)
* byname:                                Mail Variables.      (line  66)
* charset:                               Mail Variables.      (line  89)
* chdir, mail command:                   Changing mailbox/directory.
                                                              (line   6)
* cmd:                                   Mail Variables.      (line 100)
* columns:                               Mail Variables.      (line 106)
* comparator, sieve:                     Tests.               (line  68)
* contains, sieve:                       Tests.               (line  20)
* Copy, mail command:                    Saving Messages.     (line   6)
* copy, mail command:                    Saving Messages.     (line   6)
* count, sieve:                          Tests.               (line  61)
* crt:                                   Mail Variables.      (line 113)
* datefield:                             Mail Variables.      (line  77)
* debug <1>:                             Mail Variables.      (line 125)
* debug:                                 Debug Statement.     (line   6)
* decode, mail command:                  Displaying Messages. (line   6)
* decode-fallback:                       Mail Variables.      (line 137)
* delete, mail command:                  Disposing of Messages.
                                                              (line   6)
* discard, mail command:                 Controlling Header Display.
                                                              (line   6)
* domain, sieve:                         Tests.               (line  93)
* dot:                                   Mail Variables.      (line 163)
* dp, mail command:                      Disposing of Messages.
                                                              (line   6)
* dt, mail command:                      Disposing of Messages.
                                                              (line   6)
* echo, mail command:                    Scripting.           (line  15)
* edit, mail command:                    Editing Messages.    (line   6)
* editheaders:                           Mail Variables.      (line 178)
* else, mail command:                    Scripting.           (line 115)
* emptystart:                            Mail Variables.      (line 170)
* endif, mail command:                   Scripting.           (line 115)
* escape:                                Mail Variables.      (line 186)
* file, mail command:                    Changing mailbox/directory.
                                                              (line   6)
* flipr:                                 Mail Variables.      (line 193)
* folder:                                Mail Variables.      (line 200)
* folder, mail command:                  Changing mailbox/directory.
                                                              (line   6)
* folders, mail command:                 Displaying Information.
                                                              (line   6)
* Followup, mail command:                Replying.            (line   6)
* followup, mail command:                Replying.            (line   6)
* forward-file:                          Forwarding.          (line  15)
* forward-file-checks:                   Forwarding.          (line  22)
* from, mail command:                    Displaying Information.
                                                              (line   6)
* fromfield:                             Mail Variables.      (line 207)
* GNU-MU-Dir:                            Radius Statement.    (line  44)
* GNU-MU-GECOS:                          Radius Statement.    (line  43)
* GNU-MU-GID:                            Radius Statement.    (line  42)
* GNU-MU-Mailbox:                        Radius Statement.    (line  46)
* GNU-MU-Quota:                          Radius Statement.    (line  47)
* GNU-MU-Shell:                          Radius Statement.    (line  45)
* GNU-MU-UID:                            Radius Statement.    (line  41)
* GNU-MU-User-Name:                      Radius Statement.    (line  39)
* group, mail command:                   Aliasing.            (line   6)
* gsasl:                                 GSASL Statement.     (line   8)
* header:                                Mail Variables.      (line 217)
* headers, mail command:                 Displaying Information.
                                                              (line   6)
* headline:                              Mail Variables.      (line 224)
* help, mail command:                    Obtaining Online Help.
                                                              (line   6)
* hold:                                  Mail Variables.      (line 269)
* hold, mail command:                    Marking Messages.    (line   6)
* if, mail command:                      Scripting.           (line 115)
* if, sieve:                             Control Flow.        (line   6)
* ignore:                                Mail Variables.      (line 278)
* ignore, mail command:                  Controlling Header Display.
                                                              (line   6)
* ignoreeof:                             Mail Variables.      (line 286)
* include:                               Include.             (line   6)
* incorporate, mail command:             Incorporating New Mail.
                                                              (line   6)
* indentprefix:                          Mail Variables.      (line 293)
* inplacealiases:                        Mail Variables.      (line 299)
* is, sieve:                             Tests.               (line  13)
* keep:                                  Mail Variables.      (line 308)
* keepsave:                              Mail Variables.      (line 317)
* ldap:                                  LDAP Statement.      (line   8)
* list, mail command:                    Obtaining Online Help.
                                                              (line   6)
* localpart, sieve:                      Tests.               (line  90)
* locking:                               Locking Statement.   (line   6)
* logging:                               Logging Statement.   (line   6)
* mail, mail command:                    Replying.            (line   6)
* mailbox:                               Mailbox Statement.   (line   6)
* mailer:                                Mailer Statement.    (line   6)
* mailx:                                 Mail Variables.      (line 325)
* matches, sieve:                        Tests.               (line  27)
* mbox, mail command:                    Saving Messages.     (line   6)
* metamail:                              Mail Variables.      (line 340)
* metoo:                                 Mail Variables.      (line 375)
* mimenoask:                             Mail Variables.      (line 359)
* mode:                                  Mail Variables.      (line 383)
* next, mail command:                    Moving Within a Mailbox.
                                                              (line   6)
* nosender, mail command:                Controlling Sender Fields.
                                                              (line   6)
* not, sieve:                            Tests and Conditions.
                                                              (line  18)
* nullbody:                              Mail Variables.      (line 409)
* nullbodymsg:                           Mail Variables.      (line 435)
* onehop:                                Mail Variables.      (line 445)
* or, sieve:                             Tests and Conditions.
                                                              (line  22)
* outfolder:                             Mail Variables.      (line 452)
* page:                                  Mail Variables.      (line 460)
* pam:                                   PAM Statement.       (line   6)
* param:                                 Mailbox Statement.   (line 127)
* pipe, mail command:                    Displaying Messages. (line   6)
* preserve, mail command:                Marking Messages.    (line   6)
* prev, mail command:                    Moving Within a Mailbox.
                                                              (line   6)
* Print, mail command:                   Displaying Messages. (line   6)
* print, mail command:                   Displaying Messages. (line   6)
* prompt:                                Mail Variables.      (line 467)
* quiet:                                 Mail Variables.      (line 473)
* quit:                                  Mail Variables.      (line 480)
* radius:                                Radius Statement.    (line   6)
* rc:                                    Mail Variables.      (line 486)
* readonly:                              Mail Variables.      (line 494)
* record:                                Mail Variables.      (line 503)
* recursivealiases:                      Mail Variables.      (line 509)
* regex:                                 Mail Variables.      (line 515)
* regex, sieve:                          Tests.               (line  35)
* Reply, mail command:                   Replying.            (line   6)
* reply, mail command:                   Replying.            (line   6)
* replyprefix:                           Mail Variables.      (line 522)
* replyregex:                            Mail Variables.      (line 529)
* require, sieve:                        Require Statement.   (line   6)
* Respond, mail command:                 Replying.            (line   6)
* respond, mail command:                 Replying.            (line   6)
* retain, mail command:                  Controlling Header Display.
                                                              (line   6)
* save:                                  Mail Variables.      (line 546)
* Save, mail command:                    Saving Messages.     (line   6)
* save, mail command:                    Saving Messages.     (line   6)
* screen:                                Mail Variables.      (line 553)
* script <1>:                            Python Maidag Filters.
                                                              (line   6)
* script <2>:                            Scheme Maidag Filters.
                                                              (line   6)
* script:                                Sieve Maidag Filters.
                                                              (line   6)
* sender, mail command:                  Controlling Sender Fields.
                                                              (line   6)
* sendmail:                              Mail Variables.      (line 560)
* sendwait:                              Mail Variables.      (line 566)
* server:                                Server Statement.    (line   6)
* set, mail command:                     Scripting.           (line  26)
* shell, mail command:                   Shell Escapes.       (line   6)
* showenvelope:                          Mail Variables.      (line 428)
* showto:                                Mail Variables.      (line 573)
* sign:                                  Mail Variables.      (line 588)
* Sign:                                  Mail Variables.      (line 580)
* size, mail command:                    Displaying Information.
                                                              (line   6)
* source, mail command:                  Scripting.           (line  20)
* sql:                                   SQL Statement.       (line   9)
* struct, mail command:                  Displaying Messages. (line   6)
* subject:                               Mail Variables.      (line 604)
* summary, mail command:                 Displaying Information.
                                                              (line   6)
* tag, mail command:                     Marking Messages.    (line   6)
* tcp-wrappers:                          Tcp-wrappers Statement.
                                                              (line   6)
* text::                                 Lexical Structure.   (line  62)
* tls:                                   TLS Statement.       (line   8)
* top, mail command:                     Displaying Messages. (line   6)
* toplines:                              Mail Variables.      (line 611)
* touch, mail command:                   Saving Messages.     (line   6)
* type:                                  Mailbox Statement.   (line 122)
* Type, mail command:                    Displaying Messages. (line   6)
* type, mail command:                    Displaying Messages. (line   6)
* unalias, mail command:                 Aliasing.            (line   6)
* undelete, mail command:                Disposing of Messages.
                                                              (line   6)
* unset, mail command:                   Scripting.           (line  26)
* user:                                  Mailbox Statement.   (line 130)
* value, sieve:                          Tests.               (line  39)
* variable, mail command:                Scripting.           (line  78)
* variable-pretty-print:                 Mail Variables.      (line 629)
* variable-strict:                       Mail Variables.      (line 617)
* verbose:                               Mail Variables.      (line 638)
* version, mail command:                 Obtaining Online Help.
                                                              (line   6)
* virtdomain:                            Virtdomain Statement.
                                                              (line   6)
* visual, mail command:                  Editing Messages.    (line   6)
* warranty, mail command:                Obtaining Online Help.
                                                              (line   6)
* Write, mail command:                   Saving Messages.     (line   6)
* write, mail command:                   Saving Messages.     (line   6)
* xmailer:                               Mail Variables.      (line 645)
* z, mail command:                       Displaying Information.
                                                              (line   6)
* |, mail command:                       Displaying Messages. (line   6)
* ~!, mail escape:                       Executing Shell Commands.
                                                              (line   6)
* ~-, mail escape:                       Executing Other Mail Commands.
                                                              (line   6)
* ~., mail escape:                       Quitting Compose Mode.
                                                              (line   6)
* ~:, mail escape:                       Executing Other Mail Commands.
                                                              (line   6)
* ~?, mail escape:                       Getting Help on Compose Escapes.
                                                              (line   6)
* ~A, mail escape:                       Signing the Message. (line   6)
* ~a, mail escape:                       Signing the Message. (line   6)
* ~e, mail escape:                       Editing the Message. (line   6)
* ~F, mail escape:                       Printing Another Message.
                                                              (line   6)
* ~f, mail escape:                       Printing Another Message.
                                                              (line   6)
* ~i, mail escape:                       Inserting Value of a Mail Variable.
                                                              (line   6)
* ~M, mail escape:                       Enclosing Another Message.
                                                              (line   6)
* ~m, mail escape:                       Enclosing Another Message.
                                                              (line   6)
* ~p, mail escape:                       Printing And Saving the Message.
                                                              (line   6)
* ~v, mail escape:                       Editing the Message. (line   6)
* ~w, mail escape:                       Printing And Saving the Message.
                                                              (line   6)
* ~x, mail escape:                       Quitting Compose Mode.
                                                              (line   6)
* ~|, mail escape:                       Executing Shell Commands.
                                                              (line   6)


File: mailutils.info,  Node: Program Index,  Next: Concept Index,  Prev: Keyword Index,  Up: Top

Program Index
*************

 [index ]
* Menu:

* comsatd:                               comsatd.              (line  6)
* frm:                                   frm and from.         (line 22)
* from:                                  frm and from.         (line 79)
* guimb:                                 guimb.                (line  6)
* imap4d:                                imap4d.               (line  6)
* maidag:                                maidag.               (line  6)
* mail:                                  mail.                 (line  6)
* mailutils-config:                      mailutils-config.     (line  6)
* messages:                              messages.             (line  6)
* mimeview:                              mimeview.             (line  6)
* movemail:                              movemail.             (line  6)
* pop3d:                                 pop3d.                (line  6)
* readmsg:                               readmsg.              (line  6)
* sieve:                                 sieve.                (line  6)


File: mailutils.info,  Node: Concept Index,  Prev: Program Index,  Up: Top

Concept Index
*************

This is a general index of all issues discussed in this manual

 [index ]
* Menu:

* abbreviations for months:              Calendar date items. (line  38)
* action, sieve:                         Actions Described.   (line   6)
* Address:                               Address.             (line   6)
* Attribute:                             Attribute.           (line   6)
* authentication:                        Auth Statement.      (line   6)
* Authentication Library:                libmu_auth.          (line   6)
* Authenticator:                         Authenticator.       (line   6)
* authorization:                         Auth Statement.      (line   6)
* authors of get_date:                   Authors of get_date. (line   6)
* beginning of time, for POSIX:          Seconds since the Epoch.
                                                              (line  13)
* Bellovin, Steven M.:                   Authors of get_date. (line   6)
* Berets, Jim:                           Authors of get_date. (line   6)
* Berry, K.:                             Authors of get_date. (line  14)
* block statement, configuration file:   Block Statements.    (line   6)
* Body:                                  Body.                (line   6)
* boolean value:                         Statements.          (line  26)
* calendar date item:                    Calendar date items. (line   6)
* case, ignored in dates:                General date syntax. (line  64)
* comments, configuration file:          Comments.            (line   6)
* comments, in dates:                    General date syntax. (line  64)
* comments, multi-line:                  Comments.            (line  14)
* comments, single-line:                 Comments.            (line   6)
* comparator, sieve:                     Comparators.         (line   6)
* condition, sieve:                      Tests and Conditions.
                                                              (line  15)
* configuration file statements:         Statements.          (line   6)
* configuring servers:                   Server Settings.     (line   6)
* daemon, server mode:                   General Server Configuration.
                                                              (line  31)
* date format, ISO 8601:                 Calendar date items. (line  30)
* date input formats:                    Date Input Formats.  (line   6)
* day of week item:                      Day of week items.   (line   6)
* direct indexing:                       Mailbox Statement.   (line  77)
* directory indexing:                    Mailbox Statement.   (line  62)
* displacement of dates:                 Relative items in date strings.
                                                              (line   6)
* Eggert, Paul:                          Authors of get_date. (line   6)
* Envelope:                              Envelope.            (line   6)
* epoch, for POSIX:                      Seconds since the Epoch.
                                                              (line  13)
* escape sequence:                       Statements.          (line  34)
* Exim:                                  Exim-maidag.         (line   6)
* FDL, GNU Free Documentation License:   GNU FDL.             (line   6)
* Folder:                                Folder.              (line   6)
* forward:                               Forwarding.          (line   6)
* Framework:                             libmailutils.        (line   6)
* general date syntax:                   General date syntax. (line   6)
* hashed indexing:                       Mailbox Statement.   (line 103)
* Headers:                               Headers.             (line   6)
* here-document:                         Statements.          (line  72)
* IMAP4 namespace:                       Namespace.           (line   6)
* include statement, configuration file: Include.             (line   6)
* indexing, direct:                      Mailbox Statement.   (line  77)
* indexing, hashed:                      Mailbox Statement.   (line 103)
* indexing, reverse:                     Mailbox Statement.   (line  97)
* inetd, server mode:                    General Server Configuration.
                                                              (line  43)
* ISO 8601 date format:                  Calendar date items. (line  30)
* items in date strings:                 General date syntax. (line   6)
* Iterator:                              Iterator.            (line   6)
* language, in dates:                    General date syntax. (line  40)
* libmu_auth:                            libmu_auth.          (line   6)
* libmu_auth modules:                    Existing Modules.    (line   6)
* libmu_auth, data types:                Data Types.          (line   6)
* libmu_auth, linking with:              Using libmu_auth in Your Programs.
                                                              (line   6)
* libmu_auth, obtaining authorization information: Obtaining Authorization Information.
                                                              (line   6)
* libmu_scm:                             libmu_scm.           (line   6)
* libmu_sieve:                           libmu_sieve.         (line   6)
* Libraries:                             Libraries.           (line   6)
* Linking with libmu_auth:               Using libmu_auth in Your Programs.
                                                              (line   6)
* list:                                  Statements.          (line 114)
* LMTP:                                  MeTA1-maidag.        (line   6)
* Locker:                                Locker.              (line   6)
* MacKenzie, David:                      Authors of get_date. (line   6)
* Mailbox:                               Mailbox.             (line   6)
* Mailer:                                Mailer.              (line   6)
* mailman:                               External Actions.    (line  24)
* Mailutils configuration file:          configuration.       (line   6)
* mailutils.dict:                        Radius Statement.    (line  50)
* mailutils.rc:                          configuration.       (line   6)
* Message:                               Message.             (line   6)
* MeTA1:                                 MeTA1-maidag.        (line   6)
* Meyering, Jim:                         Authors of get_date. (line   6)
* minutes, time zone correction by:      Time of day items.   (line  30)
* month names in date strings:           Calendar date items. (line  38)
* months, written-out:                   General date syntax. (line  36)
* multi-line comments:                   Comments.            (line  14)
* multiline strings, sieve:              Lexical Structure.   (line  62)
* namespace:                             Namespace.           (line   6)
* numbers, sieve:                        Lexical Structure.   (line  47)
* numbers, written-out:                  General date syntax. (line  26)
* ordinal numbers:                       General date syntax. (line  26)
* Pinard, F.:                            Authors of get_date. (line  14)
* plus expansion:                        Mailbox Statement.   (line 178)
* preprocessor, sieve:                   Preprocessor.        (line   6)
* Programs:                              Programs.            (line   6)
* pure numbers in date strings:          Pure numbers in date strings.
                                                              (line   6)
* quoted string:                         Statements.          (line  34)
* relative items in date strings:        Relative items in date strings.
                                                              (line   6)
* reverse indexing:                      Mailbox Statement.   (line  97)
* Salz, Rich:                            Authors of get_date. (line   6)
* Scheme:                                libmu_scm.           (line   6)
* Sendmail:                              Sendmail-maidag.     (line   6)
* server configuration, general:         General Server Configuration.
                                                              (line   6)
* server settings, configuration:        Server Settings.     (line   6)
* server statement:                      Server Statement.    (line   6)
* Sieve Language:                        Sieve Language.      (line   6)
* Sieve Library:                         libmu_sieve.         (line   6)
* Sieve preprocessor statements:         Preprocessor.        (line   6)
* simple statements:                     Statements.          (line   6)
* single-line comments:                  Comments.            (line   6)
* statement, simple:                     Statements.          (line   6)
* statements, configuration file:        Statements.          (line   6)
* Stream:                                Stream.              (line   6)
* string list, sieve:                    Lexical Structure.   (line 128)
* string, quoted:                        Statements.          (line  34)
* string, unquoted:                      Statements.          (line  30)
* strings, sieve:                        Lexical Structure.   (line  58)
* test, sieve <1>:                       Tests.               (line   6)
* test, sieve:                           Tests and Conditions.
                                                              (line   6)
* time of day item:                      Time of day items.   (line   6)
* time zone correction:                  Time of day items.   (line  30)
* time zone item <1>:                    Time zone items.     (line   6)
* time zone item:                        General date syntax. (line  44)
* URL:                                   URL.                 (line   6)
* Using libmu_auth:                      Using libmu_auth in Your Programs.
                                                              (line   6)


