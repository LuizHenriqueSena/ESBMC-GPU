#!/bin/bash

#set print error e/or time
while getopts eth OPTION; do
	case "${OPTION}" in
		e) PRINT_ERROR=1 ;;
		t) PRINT_TIME=1 ;;
		h) PRINT_HELP=1;;
	esac
done

########HELP###########
if [ ${PRINT_HELP} ]; then
echo -e "\033[33m"
echo "Este script executa o ESBMC sobre casos de teste CUDA em"
echo "pastas e subpastas que possuem o arquivo main.cu."
echo ""
echo "#Configurações:"
echo ""
echo "O script usa a versão do ESBMC definida na variável de"
echo "ambiente do Linux."
echo ""
echo "#Uso:"
echo ""
#echo "./make.sh		show default results (e.g, cuda01 [Correct])"
echo "./make.sh		exibe o resultado padrão (e.g., cuda01 [Correct])"
#echo "./make.sh [-h]		show help"
echo "./make.sh [-h]		exibe o texto de ajuda"
#echo "./make.sh [-e]		show errors"
echo "./make.sh [-e]		exibe o motivo de falha do caso de teste (versão beta)"
#echo "./make.sh [-t]		show execution time for each test case in minutes"
echo "./make.sh [-t]		exibe o tempo de execução para cada caso de teste em minutos"
echo ""
echo "O resumo final apresenta a quantidade de casos corretos e"
echo "incorretos, e o tempo total de execução em segundos."
echo ""
echo -e "\033[0m"
exit
fi


########FUNCTION FOR PRINT RESULTS###########
function print_result(){
	if [ ${PRINT_TIME} ]; then
		echo "$1 [$2] [time(m): $3]" >> tests.log
		echo "$1 [$2] [time(m): $3]"
	else
		echo "$1 [$2]" >> tests.log
		echo "$1 [$2]"
	fi
}

########FUNCTION GENERATE RESULTS###########
#generate result file ex: cuda01 [correct]
function result_gen(){
failed=`cat $1 | tail -1`
success=`cat $1 | tail -2 | head -1`

#report for incorrect in violated property or successful
report_line=`cat $1 | grep -n "Violated property" | cut -d':' -f1`
lines=`cat $1 | wc -l`
block=`expr $lines - $report_line + 1`
violated=`cat $1 | tail -$block`

#define if either correct or incorrect
result=`cat $2 | tail -1`
result=${result/$/}
result=${result/^/}

name_file=`echo $1 | sed 's/_tmp//'`
if [ "$failed" == "$result" ]; then
	#save in tests.log; print on view
	print_result $name_file Correct $3

	#correct fail reason
	block=`expr $block + 1`
	if [ ${PRINT_ERROR} ]; then
		if [ $block -eq $lines ];
		then
			echo $failed >> tests.log	
		else
			echo $violated >> tests.log
		fi
	fi

elif [ "$success" == "$result" ];then
	#save in tests.log; print on view
	print_result $name_file Correct $3
else
	#save in tests.log; print on view
	print_result $name_file Incorrect $3

	#incorrect reason
	block=`expr $block + 1`
	if [ ${PRINT_ERROR} ]; then
		if [ $block -eq $lines ];
		then
			echo $success >> tests.log	
		else
			echo $violated >> tests.log
		fi
	fi
fi

#delete temporary result file
rm $1
}

########EXECUTE###########
#erase temp files
if [ -e tests.log ]; then
	rm tests.log
fi

#generate test cases list
find * -name main.cu | sort | sed 's:main.cu::' > test_cases_list.pm

#start execution
line=0
tcl_lines=`grep -cv '$=' test_cases_list.pm`

INITIAL_EXECUTION_TIMESTAMP=$(date +%s)
while [ $line -lt $tcl_lines ]
do
	path=`cat test_cases_list.pm | head -1`
	if [ "$path" == "" ]; then
		exit
	fi
	sed -i 1d test_cases_list.pm
	
	#temporary out file to results. Result generated by result_gen() in tests.log
	result_temp=`echo $path | rev | cut -d"/" -f2 | rev `
	result_temp=`echo $result_temp"_tmp"`
	flags=`cat "$path"test.desc | head -2 | tail -1` 

	/usr/bin/time -otimetmp esbmc "$path"main.cu -I ~/libraries --z3 --timeout 900 $flags &> $result_temp

	TIME=`head -1 timetmp | cut -d" " -f3 | sed 's/elapsed//'`
	result_gen $result_temp $path/test.desc $TIME
	line=`expr $line + 1`
done
FINAL_EXECUTION_TIMESTAMP=$(date +%s)

#remove tmp files
rm timetmp test_cases_list.pm


#save and print results
results_OK=`grep "\[Correct\]" tests.log | wc -l`
results_FAILED=`grep "\[Incorrect\]" tests.log | wc -l`
total_cases=`expr $results_OK + $results_FAILED`
echo "****************************" >> tests.log
echo "****************************"
echo "Correct results: $results_OK" >> tests.log
echo "Correct results: $results_OK"
echo "Incorrect results: $results_FAILED" >> tests.log
echo "Incorrect results: $results_FAILED"
echo "Total test cases: $total_cases" >> tests.log
echo "Total test cases: $total_cases"
ALLTIME=$((FINAL_EXECUTION_TIMESTAMP - INITIAL_EXECUTION_TIMESTAMP));
echo "Time(s): $ALLTIME" >> tests.log
echo "Time(s): $ALLTIME"
echo "****************************" >> tests.log
echo "****************************"
