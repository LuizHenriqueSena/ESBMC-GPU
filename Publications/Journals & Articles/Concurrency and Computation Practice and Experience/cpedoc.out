\BOOKMARK [1][]{section.1}{1 Introduction}{}% 1
\BOOKMARK [2][]{subsection.1.1}{1.1 Contributions}{section.1}% 2
\BOOKMARK [2][]{subsection.1.2}{1.2 Organization of this work}{section.1}% 3
\BOOKMARK [1][]{section.2}{2 Preliminaries}{}% 4
\BOOKMARK [2][]{subsection.2.1}{2.1 CUDA Programming Language}{section.2}% 5
\BOOKMARK [2][]{subsection.2.2}{2.2 Existing GPU Verifiers}{section.2}% 6
\BOOKMARK [2][]{subsection.2.3}{2.3 ESBMC}{section.2}% 7
\BOOKMARK [3][]{figure.caption.1}{2.3.1 Software Architecture}{subsection.2.3}% 8
\BOOKMARK [1][]{section.3}{3 Verifying CUDA Programs}{}% 9
\BOOKMARK [2][]{subsection.3.1}{3.1 Operational Models for CUDA Libraries}{section.3}% 10
\BOOKMARK [3][]{subsubsection.3.1.1}{3.1.1 Correctness of the CUDA Operational Model \(COM\)}{subsection.3.1}% 11
\BOOKMARK [2][]{subsection.3.2}{3.2 Modeling Kernel with Pthread Functions}{section.3}% 12
\BOOKMARK [3][]{subsubsection.3.2.1}{3.2.1 Thread Synchronization}{subsection.3.2}% 13
\BOOKMARK [3][]{subsubsection.3.2.2}{3.2.2 Illustrative Example}{subsection.3.2}% 14
\BOOKMARK [2][]{subsection.3.3}{3.3 Monotonic Partial Order Reduction}{section.3}% 15
\BOOKMARK [3][]{subsubsection.3.3.1}{3.3.1 Differences from MPOR to other interleaving reduction methods}{subsection.3.3}% 16
\BOOKMARK [2][]{subsection.3.4}{3.4 Two-threads Analysis}{section.3}% 17
\BOOKMARK [1][]{section.4}{4 Experimental Evaluation}{}% 18
\BOOKMARK [2][]{subsection.4.1}{4.1 Experimental Setup}{section.4}% 19
\BOOKMARK [2][]{subsection.4.2}{4.2 Evaluating SMT Solvers for Verifying CUDA Programs}{section.4}% 20
\BOOKMARK [2][]{subsection.4.3}{4.3 Experimental Results}{section.4}% 21
\BOOKMARK [3][]{subsubsection.4.3.1}{4.3.1 ESBMC-GPU effectiveness over existing GPU verifiers}{subsection.4.3}% 22
\BOOKMARK [1][]{section.5}{5 Conclusions}{}% 23
